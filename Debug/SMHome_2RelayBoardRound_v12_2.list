
SMHome_2RelayBoardRound_v12_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000607c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061fc  080061fc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080061fc  080061fc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061fc  080061fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  08006260  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08006260  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010cb3  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037db  00000000  00000000  00030d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d00  00000000  00000000  00035678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4aa  00000000  00000000  00036378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d99  00000000  00000000  00051822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090e64  00000000  00000000  000685bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004768  00000000  00000000  000f9420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fdb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006170 	.word	0x08006170

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08006170 	.word	0x08006170

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b20      	ldr	r3, [pc, #128]	; (80001f0 <MX_ADC1_Init+0x94>)
 800016e:	4a21      	ldr	r2, [pc, #132]	; (80001f4 <MX_ADC1_Init+0x98>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000172:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <MX_ADC1_Init+0x94>)
 8000174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800017a:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <MX_ADC1_Init+0x94>)
 800017c:	2201      	movs	r2, #1
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b1b      	ldr	r3, [pc, #108]	; (80001f0 <MX_ADC1_Init+0x94>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <MX_ADC1_Init+0x94>)
 8000188:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <MX_ADC1_Init+0x94>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000194:	4b16      	ldr	r3, [pc, #88]	; (80001f0 <MX_ADC1_Init+0x94>)
 8000196:	2202      	movs	r2, #2
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	4815      	ldr	r0, [pc, #84]	; (80001f0 <MX_ADC1_Init+0x94>)
 800019c:	f002 f9e0 	bl	8002560 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80001a6:	f000 fcc9 	bl	8000b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80001aa:	2311      	movs	r3, #17
 80001ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80001b2:	2304      	movs	r3, #4
 80001b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	480d      	ldr	r0, [pc, #52]	; (80001f0 <MX_ADC1_Init+0x94>)
 80001bc:	f002 fcb0 	bl	8002b20 <HAL_ADC_ConfigChannel>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001c6:	f000 fcb9 	bl	8000b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80001ca:	2310      	movs	r3, #16
 80001cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	4806      	ldr	r0, [pc, #24]	; (80001f0 <MX_ADC1_Init+0x94>)
 80001d8:	f002 fca2 	bl	8002b20 <HAL_ADC_ConfigChannel>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001e2:	f000 fcab 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000078 	.word	0x20000078
 80001f4:	40012400 	.word	0x40012400

080001f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1d      	ldr	r2, [pc, #116]	; (800027c <HAL_ADC_MspInit+0x84>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d133      	bne.n	8000272 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020a:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <HAL_ADC_MspInit+0x88>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <HAL_ADC_MspInit+0x88>)
 8000210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000214:	6193      	str	r3, [r2, #24]
 8000216:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <HAL_ADC_MspInit+0x88>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000222:	4b18      	ldr	r3, [pc, #96]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 8000224:	4a18      	ldr	r2, [pc, #96]	; (8000288 <HAL_ADC_MspInit+0x90>)
 8000226:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 800022a:	2200      	movs	r2, #0
 800022c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 8000244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000248:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 800024c:	2220      	movs	r2, #32
 800024e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 8000252:	2200      	movs	r2, #0
 8000254:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 8000258:	f003 feb6 	bl	8003fc8 <HAL_DMA_Init>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000262:	f000 fc6b 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 800026a:	621a      	str	r2, [r3, #32]
 800026c:	4a05      	ldr	r2, [pc, #20]	; (8000284 <HAL_ADC_MspInit+0x8c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40012400 	.word	0x40012400
 8000280:	40021000 	.word	0x40021000
 8000284:	200000a8 	.word	0x200000a8
 8000288:	40020008 	.word	0x40020008

0800028c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <HAL_ADC_MspDeInit+0x30>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d10a      	bne.n	80002b4 <HAL_ADC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <HAL_ADC_MspDeInit+0x34>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <HAL_ADC_MspDeInit+0x34>)
 80002a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002a8:	6193      	str	r3, [r2, #24]

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6a1b      	ldr	r3, [r3, #32]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 fee4 	bl	800407c <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40012400 	.word	0x40012400
 80002c0:	40021000 	.word	0x40021000

080002c4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <MX_CAN_Init+0x64>)
 80002ca:	4a18      	ldr	r2, [pc, #96]	; (800032c <MX_CAN_Init+0x68>)
 80002cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <MX_CAN_Init+0x64>)
 80002d0:	2209      	movs	r2, #9
 80002d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_CAN_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_CAN_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_CAN_Init+0x64>)
 80002e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80002e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_CAN_Init+0x64>)
 80002ea:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80002ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_CAN_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <MX_CAN_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_CAN_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <MX_CAN_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_CAN_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <MX_CAN_Init+0x64>)
 8000316:	f002 feab 	bl	8003070 <HAL_CAN_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000320:	f000 fc0c 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200000f0 	.word	0x200000f0
 800032c:	40006400 	.word	0x40006400

08000330 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a24      	ldr	r2, [pc, #144]	; (80003dc <HAL_CAN_MspInit+0xac>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d141      	bne.n	80003d4 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000350:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <HAL_CAN_MspInit+0xb0>)
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	4a22      	ldr	r2, [pc, #136]	; (80003e0 <HAL_CAN_MspInit+0xb0>)
 8000356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035a:	61d3      	str	r3, [r2, #28]
 800035c:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <HAL_CAN_MspInit+0xb0>)
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <HAL_CAN_MspInit+0xb0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <HAL_CAN_MspInit+0xb0>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <HAL_CAN_MspInit+0xb0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000384:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	4813      	ldr	r0, [pc, #76]	; (80003e4 <HAL_CAN_MspInit+0xb4>)
 8000396:	f004 f89d 	bl	80044d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800039a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003a0:	2302      	movs	r3, #2
 80003a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a4:	2303      	movs	r3, #3
 80003a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	480d      	ldr	r0, [pc, #52]	; (80003e4 <HAL_CAN_MspInit+0xb4>)
 80003b0:	f004 f890 	bl	80044d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	2014      	movs	r0, #20
 80003ba:	f003 fdc0 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003be:	2014      	movs	r0, #20
 80003c0:	f003 fdd9 	bl	8003f76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	2016      	movs	r0, #22
 80003ca:	f003 fdb8 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80003ce:	2016      	movs	r0, #22
 80003d0:	f003 fdd1 	bl	8003f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40006400 	.word	0x40006400
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010800 	.word	0x40010800

080003e8 <CAN_ListenFilter_Init>:
 * Prepare filter for incoming CAN packets.  Set two filter bank
 * first for this board ID and second for broadcast.
 *
 * @param hcan
 */
void  CAN_ListenFilter_Init(CAN_HandleTypeDef *hcan, uint8_t myAddr) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08e      	sub	sp, #56	; 0x38
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	460b      	mov	r3, r1
 80003f2:	70fb      	strb	r3, [r7, #3]

	CAN_FilterTypeDef sFilterConfig;

	uint32_t FilterMask = 0x00 | CANID_SET_ADDR(0xFF);
 80003f4:	f04f 53ff 	mov.w	r3, #534773760	; 0x1fe00000
 80003f8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t FilterID   = 0x00 | CANID_SET_ADDR(myAddr);
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	055b      	lsls	r3, r3, #21
 80003fe:	633b      	str	r3, [r7, #48]	; 0x30
//			BYTE_TO_BINARY(FilterMask>>24), BYTE_TO_BINARY(FilterMask>>16),
//			BYTE_TO_BINARY(FilterMask>>8), BYTE_TO_BINARY(FilterMask));


	//  Configure Filter for Ext ID in bank 1
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000400:	2301      	movs	r3, #1
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000408:	2300      	movs	r3, #0
 800040a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800040c:	2301      	movs	r3, #1
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]

	sFilterConfig.FilterIdHigh = (uint16_t)(FilterID >> 13);            // старшая часть первого "регистра фильтра"
 8000414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000416:	0b5b      	lsrs	r3, r3, #13
 8000418:	b29b      	uxth	r3, r3
 800041a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (uint16_t)(FilterID << 3) | 0x04;       // младшая часть первого "регистра фильтра"
 800041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041e:	b29b      	uxth	r3, r3
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	b29b      	uxth	r3, r3
 8000424:	f043 0304 	orr.w	r3, r3, #4
 8000428:	b29b      	uxth	r3, r3
 800042a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = (uint16_t)(FilterMask >> 13);      // старшая часть второго "регистра фильтра"
 800042c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800042e:	0b5b      	lsrs	r3, r3, #13
 8000430:	b29b      	uxth	r3, r3
 8000432:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (uint16_t)(FilterMask << 3) | 0x04; // младшая часть второго "регистра фильтра"
 8000434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000436:	b29b      	uxth	r3, r3
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	b29b      	uxth	r3, r3
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	b29b      	uxth	r3, r3
 8000442:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	4619      	mov	r1, r3
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f002 ff0b 	bl	8003266 <HAL_CAN_ConfigFilter>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <CAN_ListenFilter_Init+0x72>
	{
	    Error_Handler();
 8000456:	f000 fb71 	bl	8000b3c <Error_Handler>
	}


	//  Configure Filter for get Broadcast in bank 2

	FilterID   = 0x00 | CANID_SET_ADDR(0xFF);
 800045a:	f04f 53ff 	mov.w	r3, #534773760	; 0x1fe00000
 800045e:	633b      	str	r3, [r7, #48]	; 0x30

	sFilterConfig.FilterBank = 1;                                       // which filter bank to use from the assigned ones
 8000460:	2301      	movs	r3, #1
 8000462:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]

	sFilterConfig.FilterIdHigh = (uint16_t)(FilterID >> 13);            // старшая часть первого "регистра фильтра"
 8000468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046a:	0b5b      	lsrs	r3, r3, #13
 800046c:	b29b      	uxth	r3, r3
 800046e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (uint16_t)(FilterID << 3) | 0x04;       // младшая часть первого "регистра фильтра"
 8000470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000472:	b29b      	uxth	r3, r3
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	b29b      	uxth	r3, r3
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	b29b      	uxth	r3, r3
 800047e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = (uint16_t)(FilterMask >> 13);      // старшая часть второго "регистра фильтра"
 8000480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000482:	0b5b      	lsrs	r3, r3, #13
 8000484:	b29b      	uxth	r3, r3
 8000486:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (uint16_t)(FilterMask << 3) | 0x04; // младшая часть второго "регистра фильтра"
 8000488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800048a:	b29b      	uxth	r3, r3
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	b29b      	uxth	r3, r3
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	b29b      	uxth	r3, r3
 8000496:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	4619      	mov	r1, r3
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f002 fee1 	bl	8003266 <HAL_CAN_ConfigFilter>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <CAN_ListenFilter_Init+0xc6>
	{
	    Error_Handler();
 80004aa:	f000 fb47 	bl	8000b3c <Error_Handler>
	}



}
 80004ae:	bf00      	nop
 80004b0:	3738      	adds	r7, #56	; 0x38
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_CAN_ErrorCallback>:
 *
 * Handle error during CAN send/receive process.  Print error code to DEBUG/UART output.
 * @param hcan
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_PRINT_UART
			uint32_t er = HAL_CAN_GetError(hcan);
			println("ER CAN %lu %08lX", er, er);
#endif
	}
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * Handle interrupt when can packet arrived.  Load data, and place to queue.
 * @param hcan
 *
 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	; 0x40
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef RxHeader;
	CanPacket pkt;
	uint8_t RxData[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	f107 0220 	add.w	r2, r7, #32
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f003 f8d3 	bl	8003686 <HAL_CAN_GetRxMessage>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d002      	beq.n	80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
#ifdef DEBUG_PRINT_UART
		println("Cannot receive CAN message.");
#endif
		Error_Handler();
 80004e6:	f000 fb29 	bl	8000b3c <Error_Handler>

		//  Put new packet in queue
		q_Push(&pkt);

	}
}
 80004ea:	e039      	b.n	8000560 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		pkt.dest.addr = CANID_GET_ADDR(RxHeader.ExtId);
 80004ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ee:	0d5b      	lsrs	r3, r3, #21
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	743b      	strb	r3, [r7, #16]
		pkt.dest.port = CANID_GET_PORT(RxHeader.ExtId);
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	0c5b      	lsrs	r3, r3, #17
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	f003 030f 	and.w	r3, r3, #15
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	747b      	strb	r3, [r7, #17]
		pkt.src.addr = CANID_GET_ADDR_S(RxHeader.ExtId);
 8000502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000504:	0a5b      	lsrs	r3, r3, #9
 8000506:	b2db      	uxtb	r3, r3
 8000508:	74bb      	strb	r3, [r7, #18]
		pkt.src.port = CANID_GET_PORT_S(RxHeader.ExtId);
 800050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050c:	095b      	lsrs	r3, r3, #5
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 030f 	and.w	r3, r3, #15
 8000514:	b2db      	uxtb	r3, r3
 8000516:	74fb      	strb	r3, [r7, #19]
		pkt.cmd = CANID_GET_CMD(RxHeader.ExtId);
 8000518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f003 031f 	and.w	r3, r3, #31
 8000520:	b2db      	uxtb	r3, r3
 8000522:	753b      	strb	r3, [r7, #20]
		pkt.len = RxHeader.DLC;
 8000524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000526:	b2db      	uxtb	r3, r3
 8000528:	777b      	strb	r3, [r7, #29]
		for (int i=0; i < pkt.len; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800052e:	e00d      	b.n	800054c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			pkt.data[i] = RxData[i];
 8000530:	f107 0208 	add.w	r2, r7, #8
 8000534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000536:	4413      	add	r3, r2
 8000538:	7819      	ldrb	r1, [r3, #0]
 800053a:	f107 0215 	add.w	r2, r7, #21
 800053e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000540:	4413      	add	r3, r2
 8000542:	460a      	mov	r2, r1
 8000544:	701a      	strb	r2, [r3, #0]
		for (int i=0; i < pkt.len; i++) {
 8000546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000548:	3301      	adds	r3, #1
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800054c:	7f7b      	ldrb	r3, [r7, #29]
 800054e:	461a      	mov	r2, r3
 8000550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000552:	4293      	cmp	r3, r2
 8000554:	dbec      	blt.n	8000530 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
		q_Push(&pkt);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f872 	bl	8000644 <q_Push>
}
 8000560:	bf00      	nop
 8000562:	3740      	adds	r7, #64	; 0x40
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <CAN_Send_Packet>:
 * Handle CAN packet send.
 * @param TxHeader
 * @param TxData
 * @return
 */
uint8_t CAN_Send_Packet(CAN_TxHeaderTypeDef *TxHeader, uint8_t *TxData ) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]

	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8000572:	bf00      	nop
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <CAN_Send_Packet+0x3c>)
 8000576:	f003 f852 	bl	800361e <HAL_CAN_GetTxMailboxesFreeLevel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f9      	beq.n	8000574 <CAN_Send_Packet+0xc>

    if(HAL_CAN_AddTxMessage(&hcan, TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <CAN_Send_Packet+0x40>)
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4807      	ldr	r0, [pc, #28]	; (80005a4 <CAN_Send_Packet+0x3c>)
 8000588:	f002 ff7a 	bl	8003480 <HAL_CAN_AddTxMessage>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d003      	beq.n	800059a <CAN_Send_Packet+0x32>
    {
#ifdef DEBUG_PRINT_UART

            println("ER SEND %u %08lX", 8, hcan.ErrorCode);
#endif
            return hcan.ErrorCode;
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <CAN_Send_Packet+0x3c>)
 8000594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000596:	b2db      	uxtb	r3, r3
 8000598:	e000      	b.n	800059c <CAN_Send_Packet+0x34>
    }
    else return IS_OK;
 800059a:	2300      	movs	r3, #0

}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000f0 	.word	0x200000f0
 80005a8:	200000ec 	.word	0x200000ec

080005ac <q_Init>:

/**
 * Initialize queue
 * @param q_size
 */
void q_Init(int q_size) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	qpkt.size = q_size;
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <q_Init+0x2c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60d3      	str	r3, [r2, #12]
	qpkt.count = 0;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <q_Init+0x2c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	qpkt.first = NULL;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <q_Init+0x2c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	qpkt.last = NULL;
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <q_Init+0x2c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000118 	.word	0x20000118

080005dc <q_CreateEl>:
 *
 * Create new queue element and copy packet contents in it
 * @param pkt
 * @return
 */
QueueEl* q_CreateEl(CanPacket* pkt) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

	QueueEl* el = malloc(sizeof(QueueEl));
 80005e4:	2008      	movs	r0, #8
 80005e6:	f005 fc6d 	bl	8005ec4 <malloc>
 80005ea:	4603      	mov	r3, r0
 80005ec:	60fb      	str	r3, [r7, #12]
	if (el == NULL) { SMHome_error(RC_NO_MEM); }
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <q_CreateEl+0x1e>
 80005f4:	206a      	movs	r0, #106	; 0x6a
 80005f6:	f000 fb19 	bl	8000c2c <SMHome_error>

	el->pkt = malloc(sizeof(CanPacket));
 80005fa:	200e      	movs	r0, #14
 80005fc:	f005 fc62 	bl	8005ec4 <malloc>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	601a      	str	r2, [r3, #0]
	if (el->pkt == NULL) { SMHome_error(RC_NO_MEM); }
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <q_CreateEl+0x3a>
 8000610:	206a      	movs	r0, #106	; 0x6a
 8000612:	f000 fb0b 	bl	8000c2c <SMHome_error>

	memcpy(el->pkt, pkt, sizeof(CanPacket));
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	220e      	movs	r2, #14
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fd50 	bl	80060c4 <memcpy>
//		memcpy(el->pkt->data, pkt->data, pkt->len);
//	}
//	else {
//		el->pkt->data  = NULL;
//	}
	return el;
 8000624:	68fb      	ldr	r3, [r7, #12]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <q_ClearPkt>:
/**
 *
 * Free memory of packet saved in queue
 * @param el
 */
void q_ClearPkt(CanPacket* pkt) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
//	if ((pkt->len > 0 ) && (pkt->data != NULL)) {
//		free(pkt->data);
//	}
	free(pkt);
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f005 fc4c 	bl	8005ed4 <free>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <q_Push>:
 *
 * Insert new packet in queue.
 * @param the packed
 * @return queue element with new packet or NULL in queue is full
 */
QueueEl* q_Push(CanPacket* pkt) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	QueueEl* el = NULL;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]

	if (qpkt.count < qpkt.size) {
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <q_Push+0x60>)
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <q_Push+0x60>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	da1d      	bge.n	8000698 <q_Push+0x54>
		el = q_CreateEl(pkt);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ffbd 	bl	80005dc <q_CreateEl>
 8000662:	60f8      	str	r0, [r7, #12]
		el->next = NULL;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]

		if ( qpkt.count == 0 ) {
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <q_Push+0x60>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d106      	bne.n	8000680 <q_Push+0x3c>
			qpkt.last = el;
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <q_Push+0x60>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	6053      	str	r3, [r2, #4]
			qpkt.first = el;
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <q_Push+0x60>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	e006      	b.n	800068e <q_Push+0x4a>
		}
		else {
			qpkt.last->next = el;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <q_Push+0x60>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	605a      	str	r2, [r3, #4]
			qpkt.last = el;
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <q_Push+0x60>)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6053      	str	r3, [r2, #4]
		}

		qpkt.count++;
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <q_Push+0x60>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	3301      	adds	r3, #1
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <q_Push+0x60>)
 8000696:	6093      	str	r3, [r2, #8]
	}
	return el;
 8000698:	68fb      	ldr	r3, [r7, #12]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000118 	.word	0x20000118

080006a8 <q_Pop>:
 *
 *   Remove first saved element in queue and free elements memory.
 *   Packet steel need to be removed by  q_ClearPkt
 * @return saved packet
 */
CanPacket* q_Pop() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	if ((qpkt.count > 0 ) && (qpkt.first != NULL)) {
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <q_Pop+0x50>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd1a      	ble.n	80006ec <q_Pop+0x44>
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <q_Pop+0x50>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d016      	beq.n	80006ec <q_Pop+0x44>
		QueueEl* el = qpkt.first;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <q_Pop+0x50>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	607b      	str	r3, [r7, #4]
		qpkt.first = el->next;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <q_Pop+0x50>)
 80006ca:	6013      	str	r3, [r2, #0]
		el->next = NULL;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
		qpkt.count--;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <q_Pop+0x50>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <q_Pop+0x50>)
 80006da:	6093      	str	r3, [r2, #8]

		CanPacket* ret = el->pkt;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	603b      	str	r3, [r7, #0]
		free(el);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f005 fbf6 	bl	8005ed4 <free>
		return ret;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	e000      	b.n	80006ee <q_Pop+0x46>
	}
	return NULL;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000118 	.word	0x20000118

080006fc <q_isEmpty>:

bool q_isFull() {
	return qpkt.size == qpkt.count;
}

bool q_isEmpty() {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	if (qpkt.count == 0 ) return true;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <q_isEmpty+0x1c>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d101      	bne.n	800070c <q_isEmpty+0x10>
 8000708:	2301      	movs	r3, #1
 800070a:	e000      	b.n	800070e <q_isEmpty+0x12>
	return false;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000118 	.word	0x20000118

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_DMA_Init+0x38>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <MX_DMA_Init+0x38>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_DMA_Init+0x38>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	200b      	movs	r0, #11
 8000740:	f003 fbfd 	bl	8003f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000744:	200b      	movs	r0, #11
 8000746:	f003 fc16 	bl	8003f76 <HAL_NVIC_EnableIRQ>

}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_GPIO_Init+0xf4>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a36      	ldr	r2, [pc, #216]	; (800084c <MX_GPIO_Init+0xf4>)
 8000772:	f043 0320 	orr.w	r3, r3, #32
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b34      	ldr	r3, [pc, #208]	; (800084c <MX_GPIO_Init+0xf4>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0320 	and.w	r3, r3, #32
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_GPIO_Init+0xf4>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a30      	ldr	r2, [pc, #192]	; (800084c <MX_GPIO_Init+0xf4>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_GPIO_Init+0xf4>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_GPIO_Init+0xf4>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a2a      	ldr	r2, [pc, #168]	; (800084c <MX_GPIO_Init+0xf4>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <MX_GPIO_Init+0xf4>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIG_RL2_Pin|SIG_RL1_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007ba:	4825      	ldr	r0, [pc, #148]	; (8000850 <MX_GPIO_Init+0xf8>)
 80007bc:	f004 f8d1 	bl	8004962 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 80007c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	481e      	ldr	r0, [pc, #120]	; (8000850 <MX_GPIO_Init+0xf8>)
 80007d6:	f003 fe7d 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ADDR_B8_Pin|ADDR_B7_Pin|ADDR_B6_Pin|ADDR_B5_Pin
 80007da:	f24f 0320 	movw	r3, #61472	; 0xf020
 80007de:	613b      	str	r3, [r7, #16]
                          |ADDR_B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <MX_GPIO_Init+0xf8>)
 80007f0:	f003 fe70 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ADDR_B4_Pin|ADDR_B3_Pin|ADDR_B2_Pin;
 80007f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_GPIO_Init+0xfc>)
 800080a:	f003 fe63 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800080e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000814:	2303      	movs	r3, #3
 8000816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_GPIO_Init+0xfc>)
 8000820:	f003 fe58 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SIG_RL2_Pin|SIG_RL1_Pin;
 8000824:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0xf8>)
 800083e:	f003 fe49 	bl	80044d4 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	40010c00 	.word	0x40010c00
 8000854:	40010800 	.word	0x40010800

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#define LOCAL_UID_BASE 0x1FFFF7E8

	idBase0 = (uint16_t*)(LOCAL_UID_BASE);
 800085e:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <main+0x1a8>)
 8000860:	4a68      	ldr	r2, [pc, #416]	; (8000a04 <main+0x1ac>)
 8000862:	601a      	str	r2, [r3, #0]
	idBase1 = (uint16_t*)(LOCAL_UID_BASE + 0x02);
 8000864:	4b68      	ldr	r3, [pc, #416]	; (8000a08 <main+0x1b0>)
 8000866:	4a69      	ldr	r2, [pc, #420]	; (8000a0c <main+0x1b4>)
 8000868:	601a      	str	r2, [r3, #0]
	idBase2 = (uint32_t*)(LOCAL_UID_BASE + 0x04);
 800086a:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <main+0x1b8>)
 800086c:	4a69      	ldr	r2, [pc, #420]	; (8000a14 <main+0x1bc>)
 800086e:	601a      	str	r2, [r3, #0]
	idBase3 = (uint32_t*)(LOCAL_UID_BASE + 0x08);
 8000870:	4b69      	ldr	r3, [pc, #420]	; (8000a18 <main+0x1c0>)
 8000872:	4a6a      	ldr	r2, [pc, #424]	; (8000a1c <main+0x1c4>)
 8000874:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f001 fdf5 	bl	8002464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f8e1 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f7ff ff6b 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 8000882:	f7ff ff4b 	bl	800071c <MX_DMA_Init>
  MX_CAN_Init();
 8000886:	f7ff fd1d 	bl	80002c4 <MX_CAN_Init>
  MX_TIM2_Init();
 800088a:	f001 fd3f 	bl	800230c <MX_TIM2_Init>
  MX_ADC1_Init();
 800088e:	f7ff fc65 	bl	800015c <MX_ADC1_Init>
  MX_RTC_Init();
 8000892:	f000 f959 	bl	8000b48 <MX_RTC_Init>
//	println("Init done.");
//	println("UID: %4x-%4x-%8lx-%8lx", *idBase0, *idBase1, *idBase2, *idBase3);


	//***   Read CAN address
	THIS_CANID = 0x0;
 8000896:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <main+0x1c8>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
	//  Set can master addr to broadcast
	CAN_Masters[0] = 0xFF;
 800089c:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <main+0x1cc>)
 800089e:	22ff      	movs	r2, #255	; 0xff
 80008a0:	701a      	strb	r2, [r3, #0]

	if ( HAL_GPIO_ReadPin(GPIOB, ADDR_B1_Pin) == GPIO_PIN_RESET) {
 80008a2:	2120      	movs	r1, #32
 80008a4:	4860      	ldr	r0, [pc, #384]	; (8000a28 <main+0x1d0>)
 80008a6:	f004 f845 	bl	8004934 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d106      	bne.n	80008be <main+0x66>
		THIS_CANID = THIS_CANID | 1;
 80008b0:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <main+0x1c8>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b59      	ldr	r3, [pc, #356]	; (8000a20 <main+0x1c8>)
 80008bc:	701a      	strb	r2, [r3, #0]
	}
	if ( HAL_GPIO_ReadPin(GPIOA, ADDR_B2_Pin) == GPIO_PIN_RESET) {
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <main+0x1d4>)
 80008c4:	f004 f836 	bl	8004934 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d106      	bne.n	80008dc <main+0x84>
		THIS_CANID = THIS_CANID | (1 << 1);
 80008ce:	4b54      	ldr	r3, [pc, #336]	; (8000a20 <main+0x1c8>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f043 0302 	orr.w	r3, r3, #2
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b51      	ldr	r3, [pc, #324]	; (8000a20 <main+0x1c8>)
 80008da:	701a      	strb	r2, [r3, #0]
	}
	if ( HAL_GPIO_ReadPin(GPIOA, ADDR_B3_Pin) == GPIO_PIN_RESET) {
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	4852      	ldr	r0, [pc, #328]	; (8000a2c <main+0x1d4>)
 80008e2:	f004 f827 	bl	8004934 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <main+0xa2>
		THIS_CANID = THIS_CANID | (1 << 2);
 80008ec:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <main+0x1c8>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b4a      	ldr	r3, [pc, #296]	; (8000a20 <main+0x1c8>)
 80008f8:	701a      	strb	r2, [r3, #0]
	}
	if ( HAL_GPIO_ReadPin(GPIOA, ADDR_B4_Pin) == GPIO_PIN_RESET) {
 80008fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fe:	484b      	ldr	r0, [pc, #300]	; (8000a2c <main+0x1d4>)
 8000900:	f004 f818 	bl	8004934 <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d106      	bne.n	8000918 <main+0xc0>
		THIS_CANID = THIS_CANID | (1 << 3);
 800090a:	4b45      	ldr	r3, [pc, #276]	; (8000a20 <main+0x1c8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <main+0x1c8>)
 8000916:	701a      	strb	r2, [r3, #0]
	}
	if ( HAL_GPIO_ReadPin(GPIOB, ADDR_B5_Pin) == GPIO_PIN_RESET) {
 8000918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800091c:	4842      	ldr	r0, [pc, #264]	; (8000a28 <main+0x1d0>)
 800091e:	f004 f809 	bl	8004934 <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d106      	bne.n	8000936 <main+0xde>
		THIS_CANID = THIS_CANID | (1 << 4);
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <main+0x1c8>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <main+0x1c8>)
 8000934:	701a      	strb	r2, [r3, #0]
	}
	if ( HAL_GPIO_ReadPin(GPIOB, ADDR_B6_Pin) == GPIO_PIN_RESET) {
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	483b      	ldr	r0, [pc, #236]	; (8000a28 <main+0x1d0>)
 800093c:	f003 fffa 	bl	8004934 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d106      	bne.n	8000954 <main+0xfc>
		THIS_CANID = THIS_CANID | (1 << 5);
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <main+0x1c8>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <main+0x1c8>)
 8000952:	701a      	strb	r2, [r3, #0]
	}
	if ( HAL_GPIO_ReadPin(GPIOB, ADDR_B7_Pin) == GPIO_PIN_RESET) {
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4833      	ldr	r0, [pc, #204]	; (8000a28 <main+0x1d0>)
 800095a:	f003 ffeb 	bl	8004934 <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d106      	bne.n	8000972 <main+0x11a>
		THIS_CANID = THIS_CANID | (1 << 6);
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <main+0x1c8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <main+0x1c8>)
 8000970:	701a      	strb	r2, [r3, #0]
	}
	if ( HAL_GPIO_ReadPin(GPIOB, ADDR_B8_Pin) == GPIO_PIN_RESET) {
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	482c      	ldr	r0, [pc, #176]	; (8000a28 <main+0x1d0>)
 8000978:	f003 ffdc 	bl	8004934 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d106      	bne.n	8000990 <main+0x138>
		THIS_CANID = THIS_CANID | (1 << 7);;
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <main+0x1c8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0x1c8>)
 800098e:	701a      	strb	r2, [r3, #0]
	}


	//  Sensors DB Init
	Sensor_DB_Init();
 8000990:	f000 fde4 	bl	800155c <Sensor_DB_Init>
	q_Init(CAN_RX_STCK_SIZE);
 8000994:	2005      	movs	r0, #5
 8000996:	f7ff fe09 	bl	80005ac <q_Init>

	// CAN interface start
	//  See https://www.youtube.com/watch?v=KHNRftBa1Vc&list=PLGJHXpiemDq2U8F76MoQS7IdQG_yxS1WB&index=24
	HAL_CAN_Start(&hcan);
 800099a:	4825      	ldr	r0, [pc, #148]	; (8000a30 <main+0x1d8>)
 800099c:	f002 fd2c 	bl	80033f8 <HAL_CAN_Start>
	CAN_ListenFilter_Init(&hcan, THIS_CANID);
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <main+0x1c8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4822      	ldr	r0, [pc, #136]	; (8000a30 <main+0x1d8>)
 80009a8:	f7ff fd1e 	bl	80003e8 <CAN_ListenFilter_Init>
	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80009ac:	2102      	movs	r1, #2
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <main+0x1d8>)
 80009b0:	f002 ff8a 	bl	80038c8 <HAL_CAN_ActivateNotification>

	HAL_ADCEx_Calibration_Start(&hadc1);
 80009b4:	481f      	ldr	r0, [pc, #124]	; (8000a34 <main+0x1dc>)
 80009b6:	f002 faad 	bl	8002f14 <HAL_ADCEx_Calibration_Start>

	SMH_ADC_RunConversation();
 80009ba:	f001 f9bb 	bl	8001d34 <SMH_ADC_RunConversation>

	//TODO: Load saved configuration.

	// https://www.micropeta.com/video62
	// Start timer for 1 sec. interrupt.
	HAL_TIM_Base_Start_IT(&htim2);
 80009be:	481e      	ldr	r0, [pc, #120]	; (8000a38 <main+0x1e0>)
 80009c0:	f004 fee8 	bl	8005794 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	sleepMode();
 80009c4:	f000 f89c 	bl	8000b00 <sleepMode>

	while (!q_isEmpty()) {
 80009c8:	e008      	b.n	80009dc <main+0x184>
		CanPacket* pkt = q_Pop();
 80009ca:	f7ff fe6d 	bl	80006a8 <q_Pop>
 80009ce:	6078      	str	r0, [r7, #4]
		SMHome_InputSelector(pkt);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f931 	bl	8000c38 <SMHome_InputSelector>
		q_ClearPkt(pkt);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fe29 	bl	800062e <q_ClearPkt>
	while (!q_isEmpty()) {
 80009dc:	f7ff fe8e 	bl	80006fc <q_isEmpty>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f083 0301 	eor.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1ee      	bne.n	80009ca <main+0x172>
	}

	if (doPolling) {
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <main+0x1e4>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0e7      	beq.n	80009c4 <main+0x16c>
		SMH_SensorDOPolling();
 80009f4:	f001 fa62 	bl	8001ebc <SMH_SensorDOPolling>
		doPolling = false;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <main+0x1e4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	sleepMode();
 80009fe:	e7e1      	b.n	80009c4 <main+0x16c>
 8000a00:	20000128 	.word	0x20000128
 8000a04:	1ffff7e8 	.word	0x1ffff7e8
 8000a08:	2000012c 	.word	0x2000012c
 8000a0c:	1ffff7ea 	.word	0x1ffff7ea
 8000a10:	20000130 	.word	0x20000130
 8000a14:	1ffff7ec 	.word	0x1ffff7ec
 8000a18:	20000134 	.word	0x20000134
 8000a1c:	1ffff7f0 	.word	0x1ffff7f0
 8000a20:	20000138 	.word	0x20000138
 8000a24:	2000013c 	.word	0x2000013c
 8000a28:	40010c00 	.word	0x40010c00
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	200000f0 	.word	0x200000f0
 8000a34:	20000078 	.word	0x20000078
 8000a38:	2000018c 	.word	0x2000018c
 8000a3c:	20000139 	.word	0x20000139

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4a:	2228      	movs	r2, #40	; 0x28
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 faf4 	bl	800603c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a70:	2309      	movs	r3, #9
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a82:	2301      	movs	r3, #1
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 ffba 	bl	8004a14 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 f849 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fa26 	bl	8004f18 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ad2:	f000 f833 	bl	8000b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ade:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fb8f 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000af4:	f000 f822 	bl	8000b3c <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3750      	adds	r7, #80	; 0x50
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <sleepMode>:
/**
  * @brief  Put CPU in sleep mode
  * @param  None
  * @retval None
  */
void sleepMode() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINT_UART
	HAL_UART_DeInit(&huart2);
#endif

	/* Stopping  Systick */
	HAL_SuspendTick();
 8000b06:	f001 fd0f 	bl	8002528 <HAL_SuspendTick>

	__HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <sleepMode+0x38>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <sleepMode+0x38>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <sleepMode+0x38>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFE);
 8000b22:	2102      	movs	r1, #2
 8000b24:	2000      	movs	r0, #0
 8000b26:	f003 ff59 	bl	80049dc <HAL_PWR_EnterSLEEPMode>

	/* Starting Systick */
	HAL_ResumeTick();
 8000b2a:	f001 fd0b 	bl	8002544 <HAL_ResumeTick>

#ifdef DEBUG_PRINT_UART
	MX_USART2_UART_Init();
#endif
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
//  println(" Global error. Halt.");
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_RTC_Init+0x30>)
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <MX_RTC_Init+0x34>)
 8000b50:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_RTC_Init+0x30>)
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b58:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_RTC_Init+0x30>)
 8000b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b60:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_RTC_Init+0x30>)
 8000b64:	f004 fcbe 	bl	80054e4 <HAL_RTC_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000b6e:	f7ff ffe5 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000140 	.word	0x20000140
 8000b7c:	40002800 	.word	0x40002800

08000b80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_RTC_MspInit+0x3c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d110      	bne.n	8000bb4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000b92:	f003 ff17 	bl	80049c4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_RTC_MspInit+0x40>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <HAL_RTC_MspInit+0x40>)
 8000b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <HAL_RTC_MspInit+0x40>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_RTC_MspInit+0x44>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40002800 	.word	0x40002800
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	4242043c 	.word	0x4242043c

08000bc8 <getUpTime>:
  * @brief  Read the time counter available in RTC_CNT registers.
  *                the configuration information for RTC.
  * @retval Time counter
  */
uint32_t getUpTime()
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	817b      	strh	r3, [r7, #10]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	813b      	strh	r3, [r7, #8]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t timecounter = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]

  high1 = READ_REG(hrtc.Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <getUpTime+0x60>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	817b      	strh	r3, [r7, #10]
  low   = READ_REG(hrtc.Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <getUpTime+0x60>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	80fb      	strh	r3, [r7, #6]
  high2 = READ_REG(hrtc.Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <getUpTime+0x60>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	813b      	strh	r3, [r7, #8]

  if (high1 != high2)
 8000bf6:	897a      	ldrh	r2, [r7, #10]
 8000bf8:	893b      	ldrh	r3, [r7, #8]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d008      	beq.n	8000c10 <getUpTime+0x48>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc.Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000bfe:	893b      	ldrh	r3, [r7, #8]
 8000c00:	041a      	lsls	r2, r3, #16
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <getUpTime+0x60>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e004      	b.n	8000c1a <getUpTime+0x52>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8000c10:	897b      	ldrh	r3, [r7, #10]
 8000c12:	041a      	lsls	r2, r3, #16
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  return timecounter;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000140 	.word	0x20000140

08000c2c <SMHome_error>:
 */

#include "smhome_errors.h"
#include "main.h"

void SMHome_error(int error_num) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

	  while (1) {
 8000c34:	e7fe      	b.n	8000c34 <SMHome_error+0x8>
	...

08000c38 <SMHome_InputSelector>:
 * Main entry pint for select action by received CAN packet.
 * Processed one packet (first in queue). After processed^ packet deleted from queue.
 *
 * @param q_get
 */
void SMHome_InputSelector(CanPacket* pkt) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint8_t rc = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	75fb      	strb	r3, [r7, #23]
	CanAddr from_me;
	from_me.port = pkt->dest.port; // We receive request for this port (sensor)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	727b      	strb	r3, [r7, #9]
	from_me.addr = THIS_CANID;
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <SMHome_InputSelector+0xfc>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	723b      	strb	r3, [r7, #8]
	CanAddr* reply_to_addr = &(pkt->src);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3302      	adds	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
	CanAddr* from = &from_me;
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	60fb      	str	r3, [r7, #12]

	switch (pkt->cmd) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d856      	bhi.n	8000d12 <SMHome_InputSelector+0xda>
 8000c64:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <SMHome_InputSelector+0x34>)
 8000c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6a:	bf00      	nop
 8000c6c:	08000c9f 	.word	0x08000c9f
 8000c70:	08000c91 	.word	0x08000c91
 8000c74:	08000d13 	.word	0x08000d13
 8000c78:	08000c9f 	.word	0x08000c9f
 8000c7c:	08000cc1 	.word	0x08000cc1
 8000c80:	08000cfb 	.word	0x08000cfb
 8000c84:	08000d13 	.word	0x08000d13
 8000c88:	08000cd9 	.word	0x08000cd9
 8000c8c:	08000ce7 	.word	0x08000ce7
	case CAN_CMD_GET_UID:
		rc = SMHome_SendUID(reply_to_addr, from);
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	6938      	ldr	r0, [r7, #16]
 8000c94:	f000 f89a 	bl	8000dcc <SMHome_SendUID>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	75fb      	strb	r3, [r7, #23]
		break;
 8000c9c:	e03b      	b.n	8000d16 <SMHome_InputSelector+0xde>

	case CAN_CMD_GET_CONFIG:
	case CAN_CMD_GET_STATE:
		if ( pkt->dest.port == (SensorID_t)BOARD ) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <SMHome_InputSelector+0x7c>
			rc = SMHome_SendUpTime(reply_to_addr, from);
 8000ca6:	68f9      	ldr	r1, [r7, #12]
 8000ca8:	6938      	ldr	r0, [r7, #16]
 8000caa:	f000 f967 	bl	8000f7c <SMHome_SendUpTime>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	75fb      	strb	r3, [r7, #23]
 8000cb2:	e005      	b.n	8000cc0 <SMHome_InputSelector+0x88>
		}
		else
			rc = SMHome_SendSensorConf(reply_to_addr,from);
 8000cb4:	68f9      	ldr	r1, [r7, #12]
 8000cb6:	6938      	ldr	r0, [r7, #16]
 8000cb8:	f000 fac4 	bl	8001244 <SMHome_SendSensorConf>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	75fb      	strb	r3, [r7, #23]

	case CAN_CMD_SET_CONFIG:
		rc = SMHome_NetConf(reply_to_addr, pkt->dest.port, pkt->data, pkt->len);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7859      	ldrb	r1, [r3, #1]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1d5a      	adds	r2, r3, #5
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7b5b      	ldrb	r3, [r3, #13]
 8000ccc:	6938      	ldr	r0, [r7, #16]
 8000cce:	f000 f98f 	bl	8000ff0 <SMHome_NetConf>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	75fb      	strb	r3, [r7, #23]
		break;
 8000cd6:	e01e      	b.n	8000d16 <SMHome_InputSelector+0xde>

	case CAN_CMD_SEND_SENS_VALUE:
		rc = SMHome_ReplySensorValue(reply_to_addr,from);
 8000cd8:	68f9      	ldr	r1, [r7, #12]
 8000cda:	6938      	ldr	r0, [r7, #16]
 8000cdc:	f000 fb34 	bl	8001348 <SMHome_ReplySensorValue>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce4:	e017      	b.n	8000d16 <SMHome_InputSelector+0xde>

	case CAN_CMD_SET_SENS_VALUE:
		rc = SMHome_SwitchSensorState(reply_to_addr,from,pkt->data[0]);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	795b      	ldrb	r3, [r3, #5]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	6938      	ldr	r0, [r7, #16]
 8000cf0:	f000 fbca 	bl	8001488 <SMHome_SwitchSensorState>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	75fb      	strb	r3, [r7, #23]
		break;
 8000cf8:	e00d      	b.n	8000d16 <SMHome_InputSelector+0xde>

	case CAN_CMD_SET_SENS_THRESHOLD:
		rc = SMHome_NetConfThreshold(reply_to_addr, pkt->dest.port, pkt->data, pkt->len);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7859      	ldrb	r1, [r3, #1]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	1d5a      	adds	r2, r3, #5
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7b5b      	ldrb	r3, [r3, #13]
 8000d06:	6938      	ldr	r0, [r7, #16]
 8000d08:	f000 fa28 	bl	800115c <SMHome_NetConfThreshold>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	75fb      	strb	r3, [r7, #23]
		break;
 8000d10:	e001      	b.n	8000d16 <SMHome_InputSelector+0xde>
	default:
		rc = RC_CAN_UNKNOWN_CMD;
 8000d12:	2368      	movs	r3, #104	; 0x68
 8000d14:	75fb      	strb	r3, [r7, #23]
	}

	if (rc != IS_OK ){
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <SMHome_InputSelector+0xf2>
		SMHome_SendError(reply_to_addr,from,rc);
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	68f9      	ldr	r1, [r7, #12]
 8000d24:	6938      	ldr	r0, [r7, #16]
 8000d26:	f000 fbd1 	bl	80014cc <SMHome_SendError>
//		println ("ER CAN_ERROR CMD.");
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000138 	.word	0x20000138

08000d38 <CAN_TxHeader_Create>:
 * @param dest - Destination address and port
 * @param cmd -  Packet type, command
 * @return - prepared header
 *
 */
CAN_TxHeaderTypeDef *CAN_TxHeader_Create(CanAddr* dest, CanAddr* src, CAN_cmd cmd, bool is_reply) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	460b      	mov	r3, r1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	71bb      	strb	r3, [r7, #6]

	uint32_t ReplyID=0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]

	ReplyID = ReplyID | CANID_SET_ADDR(dest->addr);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	055b      	lsls	r3, r3, #21
 8000d58:	461a      	mov	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
	ReplyID = ReplyID | CANID_SET_PORT(dest->port);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	045b      	lsls	r3, r3, #17
 8000d66:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
	ReplyID = ReplyID | CANID_SET_ADDR_S(THIS_CANID);
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <CAN_TxHeader_Create+0x8c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	025b      	lsls	r3, r3, #9
 8000d76:	461a      	mov	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	617b      	str	r3, [r7, #20]
	ReplyID = ReplyID | CANID_SET_PORT_S(src->port);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	785b      	ldrb	r3, [r3, #1]
 8000d82:	015b      	lsls	r3, r3, #5
 8000d84:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]
	ReplyID = ReplyID | CANID_SET_CMD(cmd);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	617b      	str	r3, [r7, #20]

	// Prepare reply packet for send

	TxHeader.StdId = 0;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <CAN_TxHeader_Create+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = ReplyID;    // Receiver's address and port
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <CAN_TxHeader_Create+0x90>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <CAN_TxHeader_Create+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;   // Use extended Can ID
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <CAN_TxHeader_Create+0x90>)
 8000dae:	2204      	movs	r2, #4
 8000db0:	609a      	str	r2, [r3, #8]
	TxHeader.TransmitGlobalTime = 0;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <CAN_TxHeader_Create+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	751a      	strb	r2, [r3, #20]

	return &TxHeader;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <CAN_TxHeader_Create+0x90>)
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	20000138 	.word	0x20000138
 8000dc8:	20000154 	.word	0x20000154

08000dcc <SMHome_SendUID>:
 * @param src
 * @param dest
 * @param is_reply
 * @return
 */
uint8_t SMHome_SendUID(CanAddr *send_to, CanAddr *from) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]

	CAN_TxHeaderTypeDef *TxHeaderPtr;
	//Get Random sequence number

	uint16_t short_randval =(uint16_t)(*idBase2 & *idBase3 & *idBase0 & *idBase0 ) & 0x3FFF;
 8000dd6:	4b64      	ldr	r3, [pc, #400]	; (8000f68 <SMHome_SendUID+0x19c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b63      	ldr	r3, [pc, #396]	; (8000f6c <SMHome_SendUID+0x1a0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b61      	ldr	r3, [pc, #388]	; (8000f70 <SMHome_SendUID+0x1a4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	4013      	ands	r3, r2
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000df8:	81fb      	strh	r3, [r7, #14]
//	uint16_t short_randval = (uint16_t)(TM_RNG_Get() & 0x3FFF);

	TxHeaderPtr = CAN_TxHeader_Create(send_to, from, CAN_CMD_GET_UID, true);    // switch source and dest on reply packet
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff99 	bl	8000d38 <CAN_TxHeader_Create>
 8000e06:	60b8      	str	r0, [r7, #8]
//	TxHeaderPtr->ExtId = TxHeaderPtr->ExtId | CANID_SET_REPLY(1);

	//  Prepare send data

	//  PACKET 1
	TxData[0] =  3;
 8000e08:	4b5a      	ldr	r3, [pc, #360]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t) (short_randval >> 8);
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e18:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)  short_randval;
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e20:	709a      	strb	r2, [r3, #2]

	TxData[3] = (uint8_t) (*idBase0 >> 8);
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <SMHome_SendUID+0x1a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e30:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t) (*idBase0);
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <SMHome_SendUID+0x1a4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b4e      	ldr	r3, [pc, #312]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e3c:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) (*idBase1 >> 8);
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <SMHome_SendUID+0x1ac>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e4c:	715a      	strb	r2, [r3, #5]
	TxData[6] = (uint8_t) (*idBase1);
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <SMHome_SendUID+0x1ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e58:	719a      	strb	r2, [r3, #6]

	TxHeaderPtr->DLC = 7;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 8000e60:	4944      	ldr	r1, [pc, #272]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e62:	68b8      	ldr	r0, [r7, #8]
 8000e64:	f7ff fb80 	bl	8000568 <CAN_Send_Packet>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SMHome_SendUID+0xa6>
    	return RC_CAN_TRANSMIT_ERR;
 8000e6e:	2369      	movs	r3, #105	; 0x69
 8000e70:	e076      	b.n	8000f60 <SMHome_SendUID+0x194>
    }

    //  PACKET 2
    short_randval++;
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	3301      	adds	r3, #1
 8000e76:	81fb      	strh	r3, [r7, #14]

	TxData[0] = 1 << 7;  //  Set reply bit
 8000e78:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	701a      	strb	r2, [r3, #0]
	TxData[0] = TxData[0] | (uint8_t) (short_randval >> 8);
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e90:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)  short_randval;
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000e98:	705a      	strb	r2, [r3, #1]

	TxData[2] = (uint8_t) (*idBase2 >> 24);
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <SMHome_SendUID+0x19c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0e1b      	lsrs	r3, r3, #24
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000ea6:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) (*idBase2 >> 16);
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <SMHome_SendUID+0x19c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	0c1b      	lsrs	r3, r3, #16
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000eb4:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t) (*idBase2 >> 8);
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <SMHome_SendUID+0x19c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000ec2:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) (*idBase2);
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <SMHome_SendUID+0x19c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000ece:	715a      	strb	r2, [r3, #5]
	TxHeaderPtr->DLC = 6;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2206      	movs	r2, #6
 8000ed4:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 8000ed6:	4927      	ldr	r1, [pc, #156]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000ed8:	68b8      	ldr	r0, [r7, #8]
 8000eda:	f7ff fb45 	bl	8000568 <CAN_Send_Packet>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SMHome_SendUID+0x11c>
    	return RC_CAN_TRANSMIT_ERR;
 8000ee4:	2369      	movs	r3, #105	; 0x69
 8000ee6:	e03b      	b.n	8000f60 <SMHome_SendUID+0x194>
    }

    //  PACKET 3
    short_randval++;
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	3301      	adds	r3, #1
 8000eec:	81fb      	strh	r3, [r7, #14]

	TxData[0] = 1 << 7;  //  Set reply bit
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	701a      	strb	r2, [r3, #0]
	TxData[0] = TxData[0] | (uint8_t) (short_randval >> 8);
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000f06:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)  short_randval;
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000f0e:	705a      	strb	r2, [r3, #1]

	TxData[2] = (uint8_t) (*idBase3 >> 24);
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <SMHome_SendUID+0x1a0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0e1b      	lsrs	r3, r3, #24
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000f1c:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) (*idBase3 >> 16);
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <SMHome_SendUID+0x1a0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000f2a:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t) (*idBase3 >> 8);
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <SMHome_SendUID+0x1a0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000f38:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) (*idBase3);
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <SMHome_SendUID+0x1a0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000f44:	715a      	strb	r2, [r3, #5]
	TxHeaderPtr->DLC = 6;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2206      	movs	r2, #6
 8000f4a:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 8000f4c:	4909      	ldr	r1, [pc, #36]	; (8000f74 <SMHome_SendUID+0x1a8>)
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f7ff fb0a 	bl	8000568 <CAN_Send_Packet>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SMHome_SendUID+0x192>
    	return RC_CAN_TRANSMIT_ERR;
 8000f5a:	2369      	movs	r3, #105	; 0x69
 8000f5c:	e000      	b.n	8000f60 <SMHome_SendUID+0x194>
    }

    return IS_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000130 	.word	0x20000130
 8000f6c:	20000134 	.word	0x20000134
 8000f70:	20000128 	.word	0x20000128
 8000f74:	2000016c 	.word	0x2000016c
 8000f78:	2000012c 	.word	0x2000012c

08000f7c <SMHome_SendUpTime>:
 * @param src
 * @param dest
 * @param is_reply
 * @return
 */
uint8_t SMHome_SendUpTime(CanAddr *send_to, CanAddr *from) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef *TxHeaderPtr;

	TxHeaderPtr = CAN_TxHeader_Create(send_to, from, CAN_CMD_GET_STATE, true);
 8000f86:	2301      	movs	r3, #1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6839      	ldr	r1, [r7, #0]
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fed3 	bl	8000d38 <CAN_TxHeader_Create>
 8000f92:	60f8      	str	r0, [r7, #12]

	uint32_t uptime_counter = getUpTime();
 8000f94:	f7ff fe18 	bl	8000bc8 <getUpTime>
 8000f98:	60b8      	str	r0, [r7, #8]

	TxData[0] = TxData[0] | (uint8_t) (uptime_counter >> 24);
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <SMHome_SendUpTime+0x70>)
 8000f9c:	781a      	ldrb	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	0e1b      	lsrs	r3, r3, #24
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <SMHome_SendUpTime+0x70>)
 8000faa:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t) (uptime_counter >> 16);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	0c1b      	lsrs	r3, r3, #16
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <SMHome_SendUpTime+0x70>)
 8000fb4:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t) (uptime_counter >> 8);
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <SMHome_SendUpTime+0x70>)
 8000fbe:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) uptime_counter;
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <SMHome_SendUpTime+0x70>)
 8000fc6:	70da      	strb	r2, [r3, #3]

	TxHeaderPtr->DLC = 4;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 8000fce:	4907      	ldr	r1, [pc, #28]	; (8000fec <SMHome_SendUpTime+0x70>)
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff fac9 	bl	8000568 <CAN_Send_Packet>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SMHome_SendUpTime+0x64>
    	return RC_CAN_TRANSMIT_ERR;
 8000fdc:	2369      	movs	r3, #105	; 0x69
 8000fde:	e000      	b.n	8000fe2 <SMHome_SendUpTime+0x66>
    }
    return IS_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000016c 	.word	0x2000016c

08000ff0 <SMHome_NetConf>:
 * @param data  received data
 * @param len   received data length
 * @return
 */

uint8_t SMHome_NetConf(CanAddr* reply_to, SensorID_t id, uint8_t data[] , uint8_t len){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	72fb      	strb	r3, [r7, #11]
 8001000:	4613      	mov	r3, r2
 8001002:	72bb      	strb	r3, [r7, #10]
	uint8_t rc = IS_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	77fb      	strb	r3, [r7, #31]
	CanAddr from;
	from.addr = THIS_CANID;
 8001008:	4b52      	ldr	r3, [pc, #328]	; (8001154 <SMHome_NetConf+0x164>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	753b      	strb	r3, [r7, #20]
	from.port = id;
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	757b      	strb	r3, [r7, #21]

	if (id == (SensorID_t)BOARD) {
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d108      	bne.n	800102a <SMHome_NetConf+0x3a>
		CAN_Masters[0] = data[2];
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	789a      	ldrb	r2, [r3, #2]
 800101c:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <SMHome_NetConf+0x168>)
 800101e:	701a      	strb	r2, [r3, #0]
		CAN_Masters[1] = data[3];
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	78da      	ldrb	r2, [r3, #3]
 8001024:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <SMHome_NetConf+0x168>)
 8001026:	705a      	strb	r2, [r3, #1]
 8001028:	e085      	b.n	8001136 <SMHome_NetConf+0x146>
	}
	else {

		//  Check if request from master
		SMH_SensorDescrTypeDef *sensor;
		sensor = GetSensorByID(id);
 800102a:	7afb      	ldrb	r3, [r7, #11]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fe3b 	bl	8001ca8 <GetSensorByID>
 8001032:	61b8      	str	r0, [r7, #24]

		if (sensor == NULL) {
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <SMHome_NetConf+0x50>
			rc =  RC_SENSOR_NOT_FOUND;
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	77fb      	strb	r3, [r7, #31]
 800103e:	e07a      	b.n	8001136 <SMHome_NetConf+0x146>
		}
		else {
			// Get SensorType

			if ( ! sensor->isLocked) {
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	7a1b      	ldrb	r3, [r3, #8]
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d019      	beq.n	8001082 <SMHome_NetConf+0x92>

				if ( IS_SENS_ANALOG(data[0]) )
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <SMHome_NetConf+0x72>
					sensor->isAnalog = true;
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2201      	movs	r2, #1
 800105e:	715a      	strb	r2, [r3, #5]
 8001060:	e002      	b.n	8001068 <SMHome_NetConf+0x78>
				else
					sensor->isAnalog = false;
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2200      	movs	r2, #0
 8001066:	715a      	strb	r2, [r3, #5]

				if (IS_SENS_INPUT(data[0]))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <SMHome_NetConf+0x8c>
					sensor->isInput = true;
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2201      	movs	r2, #1
 8001078:	719a      	strb	r2, [r3, #6]
 800107a:	e002      	b.n	8001082 <SMHome_NetConf+0x92>
				else
					sensor->isInput = false;
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2200      	movs	r2, #0
 8001080:	719a      	strb	r2, [r3, #6]

			}

			sensor->isPolling = IS_SENS_POLL(data[0]);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	2b00      	cmp	r3, #0
 800108c:	bf14      	ite	ne
 800108e:	2301      	movne	r3, #1
 8001090:	2300      	moveq	r3, #0
 8001092:	b2da      	uxtb	r2, r3
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	711a      	strb	r2, [r3, #4]
			if ( len >= 3) {
 8001098:	7abb      	ldrb	r3, [r7, #10]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d911      	bls.n	80010c2 <SMHome_NetConf+0xd2>

				sensor->pollingInterval = data[1] << 8;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3301      	adds	r3, #1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	81da      	strh	r2, [r3, #14]
				sensor->pollingInterval = sensor->pollingInterval | (data[2] & 0xFF);
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	89da      	ldrh	r2, [r3, #14]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3302      	adds	r3, #2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b29a      	uxth	r2, r3
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	81da      	strh	r2, [r3, #14]
			}

			if ( sensor->isInput && sensor->isPolling)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	799b      	ldrb	r3, [r3, #6]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <SMHome_NetConf+0xf2>
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	791b      	ldrb	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <SMHome_NetConf+0xf2>
				rc = Sensor_SetPolling(sensor, sensor->pollingInterval);
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	89db      	ldrh	r3, [r3, #14]
 80010d6:	4619      	mov	r1, r3
 80010d8:	69b8      	ldr	r0, [r7, #24]
 80010da:	f000 fc60 	bl	800199e <Sensor_SetPolling>
 80010de:	4603      	mov	r3, r0
 80010e0:	77fb      	strb	r3, [r7, #31]

			sensor->isEventOnLow = IS_SENS_EVT_LOW(data[0]);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	709a      	strb	r2, [r3, #2]
			sensor->isEventOnHigh = IS_SENS_EVT_HIGH(data[0]);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2da      	uxtb	r2, r3
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	70da      	strb	r2, [r3, #3]


			if (rc == IS_OK) {
 800110e:	7ffb      	ldrb	r3, [r7, #31]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d110      	bne.n	8001136 <SMHome_NetConf+0x146>
				if ( IS_SENS_ON(data[0])) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <SMHome_NetConf+0x13c>
					rc = Sensor_ON(sensor);
 8001120:	69b8      	ldr	r0, [r7, #24]
 8001122:	f000 fd3b 	bl	8001b9c <Sensor_ON>
 8001126:	4603      	mov	r3, r0
 8001128:	77fb      	strb	r3, [r7, #31]
 800112a:	e004      	b.n	8001136 <SMHome_NetConf+0x146>
				}
				else {
					rc = Sensor_OFF(sensor);
 800112c:	69b8      	ldr	r0, [r7, #24]
 800112e:	f000 fd06 	bl	8001b3e <Sensor_OFF>
 8001132:	4603      	mov	r3, r0
 8001134:	77fb      	strb	r3, [r7, #31]
				}
			}
		}
	}

	if (rc == IS_OK) {
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d105      	bne.n	8001148 <SMHome_NetConf+0x158>
		SMHome_SendSensorConf(reply_to, &from);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f87e 	bl	8001244 <SMHome_SendSensorConf>
	}

	return rc;
 8001148:	7ffb      	ldrb	r3, [r7, #31]

}
 800114a:	4618      	mov	r0, r3
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000138 	.word	0x20000138
 8001158:	2000013c 	.word	0x2000013c

0800115c <SMHome_NetConfThreshold>:
 * @param id
 * @param data
 * @param len
 * @return
 */
uint8_t SMHome_NetConfThreshold(CanAddr* reply_to, SensorID_t id, uint8_t data[] , uint8_t len) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	461a      	mov	r2, r3
 8001168:	460b      	mov	r3, r1
 800116a:	72fb      	strb	r3, [r7, #11]
 800116c:	4613      	mov	r3, r2
 800116e:	72bb      	strb	r3, [r7, #10]

	uint8_t rc = IS_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	77fb      	strb	r3, [r7, #31]
//	CanAddr from;
//	from.addr = THIS_CANID;
//	from.port = id;

	SMH_SensorDescrTypeDef *sensor;
	sensor = GetSensorByID(id);
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fd96 	bl	8001ca8 <GetSensorByID>
 800117c:	6178      	str	r0, [r7, #20]

	bool isON = (data[0] >> 7 == 1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	09db      	lsrs	r3, r3, #7
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	74fb      	strb	r3, [r7, #19]
	bool isToLow = (data[0] >> 6 == 1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	099b      	lsrs	r3, r3, #6
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	74bb      	strb	r3, [r7, #18]
	uint8_t ruleId = (data[0] & 0b00111111);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011aa:	747b      	strb	r3, [r7, #17]

	if (! isON) {
 80011ac:	7cfb      	ldrb	r3, [r7, #19]
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <SMHome_NetConfThreshold+0x68>
		Sensor_ClearThreshold(sensor,ruleId);
 80011b8:	7c7b      	ldrb	r3, [r7, #17]
 80011ba:	4619      	mov	r1, r3
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f000 fc8a 	bl	8001ad6 <Sensor_ClearThreshold>
 80011c2:	e039      	b.n	8001238 <SMHome_NetConfThreshold+0xdc>
	}
	else if (len >= 4) {
 80011c4:	7abb      	ldrb	r3, [r7, #10]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d936      	bls.n	8001238 <SMHome_NetConfThreshold+0xdc>
		uint16_t thValue = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	83bb      	strh	r3, [r7, #28]
		uint16_t sensorValue = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	837b      	strh	r3, [r7, #26]
		uint8_t sensorId = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	767b      	strb	r3, [r7, #25]

		if ( len >= 3)
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d90b      	bls.n	80011f4 <SMHome_NetConfThreshold+0x98>
			thValue = data[1] << 8 | data[2];
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3301      	adds	r3, #1
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3302      	adds	r3, #2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	83bb      	strh	r3, [r7, #28]
		if ( len >= 4)
 80011f4:	7abb      	ldrb	r3, [r7, #10]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d902      	bls.n	8001200 <SMHome_NetConfThreshold+0xa4>
			sensorId = data[3];
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	767b      	strb	r3, [r7, #25]
		if ( len >= 6)
 8001200:	7abb      	ldrb	r3, [r7, #10]
 8001202:	2b05      	cmp	r3, #5
 8001204:	d90b      	bls.n	800121e <SMHome_NetConfThreshold+0xc2>
			sensorValue = data[4] << 8 | data[5];
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3305      	adds	r3, #5
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	837b      	strh	r3, [r7, #26]

		//TODO: sensorId - check  sensor ID enum

		rc = Sensor_SetThreshold(sensor, ruleId, isToLow, thValue, sensorId, sensorValue);
 800121e:	8bb8      	ldrh	r0, [r7, #28]
 8001220:	7cba      	ldrb	r2, [r7, #18]
 8001222:	7c79      	ldrb	r1, [r7, #17]
 8001224:	8b7b      	ldrh	r3, [r7, #26]
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	7e7b      	ldrb	r3, [r7, #25]
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	4603      	mov	r3, r0
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f000 fbde 	bl	80019f0 <Sensor_SetThreshold>
 8001234:	4603      	mov	r3, r0
 8001236:	77fb      	strb	r3, [r7, #31]

	}

	return rc;
 8001238:	7ffb      	ldrb	r3, [r7, #31]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <SMHome_SendSensorConf>:
 *  Send current sensor configuration
 * @param send_to requester or master address
 * @param id sensor id ( will send as source port)
 * @return
 */
uint8_t SMHome_SendSensorConf(CanAddr* send_to, CanAddr* from) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef *TxHeaderPtr;
	SMH_SensorDescrTypeDef *sensor;
	sensor = GetSensorByID((SensorID_t)from->port);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd28 	bl	8001ca8 <GetSensorByID>
 8001258:	6138      	str	r0, [r7, #16]
	TxHeaderPtr = CAN_TxHeader_Create(send_to, from, CAN_CMD_GET_CONFIG, true);
 800125a:	2301      	movs	r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fd69 	bl	8000d38 <CAN_TxHeader_Create>
 8001266:	60f8      	str	r0, [r7, #12]

	for (int i=0; i < 8; i++) {  // Clear data bytes
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e007      	b.n	800127e <SMHome_SendSensorConf+0x3a>
		TxData[i] = 0;
 800126e:	4a35      	ldr	r2, [pc, #212]	; (8001344 <SMHome_SendSensorConf+0x100>)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4413      	add	r3, r2
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 8; i++) {  // Clear data bytes
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b07      	cmp	r3, #7
 8001282:	ddf4      	ble.n	800126e <SMHome_SendSensorConf+0x2a>
	}

	if ( sensor->isEventOnHigh )
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <SMHome_SendSensorConf+0x56>
		TxData[0] =  TxData[0] | 0x1;
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <SMHome_SendSensorConf+0x100>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <SMHome_SendSensorConf+0x100>)
 8001298:	701a      	strb	r2, [r3, #0]
	if ( sensor->isEventOnLow )
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <SMHome_SendSensorConf+0x6c>
		TxData[0] =  TxData[0] | 0b10;
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012ae:	701a      	strb	r2, [r3, #0]
	if ( sensor->isPolling )
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <SMHome_SendSensorConf+0x82>
		TxData[0] =  TxData[0] | 0b100;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012c4:	701a      	strb	r2, [r3, #0]
	if ( sensor->isInput )
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <SMHome_SendSensorConf+0x98>
		TxData[0] =  TxData[0] | 0b1000;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012da:	701a      	strb	r2, [r3, #0]
	if ( sensor->isAnalog )
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	795b      	ldrb	r3, [r3, #5]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <SMHome_SendSensorConf+0xae>
		TxData[0] =  TxData[0] | 0b10000;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012f0:	701a      	strb	r2, [r3, #0]
	if ( sensor->status )
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <SMHome_SendSensorConf+0xc4>
		TxData[0] =  TxData[0] | 0b100000;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <SMHome_SendSensorConf+0x100>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <SMHome_SendSensorConf+0x100>)
 8001306:	701a      	strb	r2, [r3, #0]


	// Get Timeout
	TxData[1] = sensor->pollingInterval >> 8;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	89db      	ldrh	r3, [r3, #14]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <SMHome_SendSensorConf+0x100>)
 8001314:	705a      	strb	r2, [r3, #1]
	TxData[2] = sensor->pollingInterval & 0xFF;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	89db      	ldrh	r3, [r3, #14]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <SMHome_SendSensorConf+0x100>)
 800131e:	709a      	strb	r2, [r3, #2]

	TxHeaderPtr->DLC = 3;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2203      	movs	r2, #3
 8001324:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 8001326:	4907      	ldr	r1, [pc, #28]	; (8001344 <SMHome_SendSensorConf+0x100>)
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7ff f91d 	bl	8000568 <CAN_Send_Packet>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SMHome_SendSensorConf+0xf4>
    	return RC_CAN_TRANSMIT_ERR;
 8001334:	2369      	movs	r3, #105	; 0x69
 8001336:	e000      	b.n	800133a <SMHome_SendSensorConf+0xf6>
    }

    return IS_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000016c 	.word	0x2000016c

08001348 <SMHome_ReplySensorValue>:
 * @param send_to
 * @param from
 * @return
 */

uint8_t SMHome_ReplySensorValue(CanAddr* send_to, CanAddr* from) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
	uint8_t rc=IS_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
	CAN_TxHeaderTypeDef *TxHeaderPtr;
	SMH_SensorDescrTypeDef *sensor;
	sensor = GetSensorByID((SensorID_t)from->port);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fca4 	bl	8001ca8 <GetSensorByID>
 8001360:	6138      	str	r0, [r7, #16]

	SMH_SensValueReply_t* current = SMH_SensorGetValue(sensor);
 8001362:	6938      	ldr	r0, [r7, #16]
 8001364:	f000 fe64 	bl	8002030 <SMH_SensorGetValue>
 8001368:	60f8      	str	r0, [r7, #12]

	TxHeaderPtr = CAN_TxHeader_Create(send_to, from, CAN_CMD_SEND_SENS_VALUE, true);
 800136a:	2301      	movs	r3, #1
 800136c:	2207      	movs	r2, #7
 800136e:	6839      	ldr	r1, [r7, #0]
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fce1 	bl	8000d38 <CAN_TxHeader_Create>
 8001376:	60b8      	str	r0, [r7, #8]

	TxData[0] = EVT_REPLY_VALUE;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <SMHome_ReplySensorValue+0x94>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
	TxData[1] = current->power_of_ten;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <SMHome_ReplySensorValue+0x94>)
 8001388:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t) (current->value >> 8);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b29b      	uxth	r3, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <SMHome_ReplySensorValue+0x94>)
 8001396:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) current->value;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <SMHome_ReplySensorValue+0x94>)
 80013a0:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t) (current->vref >> 8);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <SMHome_ReplySensorValue+0x94>)
 80013ae:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) current->vref;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	885b      	ldrh	r3, [r3, #2]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <SMHome_ReplySensorValue+0x94>)
 80013b8:	715a      	strb	r2, [r3, #5]

	TxHeaderPtr->DLC = 6;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2206      	movs	r2, #6
 80013be:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 80013c0:	4906      	ldr	r1, [pc, #24]	; (80013dc <SMHome_ReplySensorValue+0x94>)
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff f8d0 	bl	8000568 <CAN_Send_Packet>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SMHome_ReplySensorValue+0x8a>
    	rc=RC_CAN_TRANSMIT_ERR;
 80013ce:	2369      	movs	r3, #105	; 0x69
 80013d0:	75fb      	strb	r3, [r7, #23]
    }

//    free(current);
	return rc;
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000016c 	.word	0x2000016c

080013e0 <SMHome_SendSensorValue>:
 * Send sensor/port value for specified sensor
 * @param sensor_id
 * @param value
 * @return
 */
uint8_t SMHome_SendSensorValue(SensorID_t sensor_id, SMH_SensValueReply_t* polled) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
	uint8_t rc = IS_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]
	CanAddr send_to, from;
	CAN_TxHeaderTypeDef *TxHeaderPtr;

	send_to.addr = CAN_Masters[0];
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <SMHome_SendSensorValue+0x9c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	733b      	strb	r3, [r7, #12]
	send_to.port = 0xFF;
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	737b      	strb	r3, [r7, #13]
	from.addr = THIS_CANID;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <SMHome_SendSensorValue+0xa0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	723b      	strb	r3, [r7, #8]
	from.port= (uint8_t)sensor_id;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	727b      	strb	r3, [r7, #9]

	TxHeaderPtr = CAN_TxHeader_Create(&send_to, &from, CAN_CMD_SEND_SENS_VALUE, true);
 8001404:	f107 0108 	add.w	r1, r7, #8
 8001408:	f107 000c 	add.w	r0, r7, #12
 800140c:	2301      	movs	r3, #1
 800140e:	2207      	movs	r2, #7
 8001410:	f7ff fc92 	bl	8000d38 <CAN_TxHeader_Create>
 8001414:	6138      	str	r0, [r7, #16]

	TxData[0] = EVT_POOLING_VALUE;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <SMHome_SendSensorValue+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	TxData[1] = polled->power_of_ten;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <SMHome_SendSensorValue+0xa4>)
 8001426:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t) (polled->value >> 8);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <SMHome_SendSensorValue+0xa4>)
 8001434:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t) (polled->value );
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <SMHome_SendSensorValue+0xa4>)
 800143e:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t) (polled->vref >> 8);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	885b      	ldrh	r3, [r3, #2]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	b29b      	uxth	r3, r3
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <SMHome_SendSensorValue+0xa4>)
 800144c:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t) polled->vref;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	885b      	ldrh	r3, [r3, #2]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <SMHome_SendSensorValue+0xa4>)
 8001456:	715a      	strb	r2, [r3, #5]

	TxHeaderPtr->DLC = 6;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2206      	movs	r2, #6
 800145c:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 800145e:	4909      	ldr	r1, [pc, #36]	; (8001484 <SMHome_SendSensorValue+0xa4>)
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f7ff f881 	bl	8000568 <CAN_Send_Packet>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SMHome_SendSensorValue+0x90>
    	return RC_CAN_TRANSMIT_ERR;
 800146c:	2369      	movs	r3, #105	; 0x69
 800146e:	e000      	b.n	8001472 <SMHome_SendSensorValue+0x92>
    }

	return rc;
 8001470:	7dfb      	ldrb	r3, [r7, #23]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000013c 	.word	0x2000013c
 8001480:	20000138 	.word	0x20000138
 8001484:	2000016c 	.word	0x2000016c

08001488 <SMHome_SwitchSensorState>:
 *
 * @param send_to
 * @param from
 * @return
 */
uint8_t SMHome_SwitchSensorState(CanAddr* send_to, CanAddr* from, uint8_t value) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	4613      	mov	r3, r2
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t rc = IS_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
	SMH_SensorDescrTypeDef *sensor;
	sensor = GetSensorByID((SensorID_t)from->port);
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fc02 	bl	8001ca8 <GetSensorByID>
 80014a4:	6138      	str	r0, [r7, #16]

	if (sensor->status == SENSOR_ON)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <SMHome_SwitchSensorState+0x36>
		rc = SMH_SensorSwitch(sensor, value);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6938      	ldr	r0, [r7, #16]
 80014b4:	f000 fe38 	bl	8002128 <SMH_SensorSwitch>
 80014b8:	4603      	mov	r3, r0
 80014ba:	75fb      	strb	r3, [r7, #23]
 80014bc:	e001      	b.n	80014c2 <SMHome_SwitchSensorState+0x3a>
	else {
		rc = RC_SENSOR_OFF_ERR;
 80014be:	236b      	movs	r3, #107	; 0x6b
 80014c0:	75fb      	strb	r3, [r7, #23]
	}
	return rc;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <SMHome_SendError>:
 * @param send_to
 * @param from
 * @param rc
 * @return
 */
uint8_t SMHome_SendError(CanAddr* send_to, CanAddr* from, uint16_t rc_value) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]

	CanAddr local_send_to, local_from;
	CAN_TxHeaderTypeDef *TxHeaderPtr;

	if (send_to == NULL) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <SMHome_SendError+0x20>
		local_send_to.addr = CAN_Masters[0];
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <SMHome_SendError+0x84>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	763b      	strb	r3, [r7, #24]
		local_send_to.port = 0xF;
 80014e6:	230f      	movs	r3, #15
 80014e8:	767b      	strb	r3, [r7, #25]
 80014ea:	e005      	b.n	80014f8 <SMHome_SendError+0x2c>
	}
	else {
		local_send_to.addr = send_to->addr;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	763b      	strb	r3, [r7, #24]
		local_send_to.port = send_to->port;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	767b      	strb	r3, [r7, #25]
	}

	local_from.addr = THIS_CANID;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <SMHome_SendError+0x88>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	753b      	strb	r3, [r7, #20]
	if (from == NULL) {
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <SMHome_SendError+0x3e>
		local_from.port = 0xF;
 8001504:	230f      	movs	r3, #15
 8001506:	757b      	strb	r3, [r7, #21]
 8001508:	e002      	b.n	8001510 <SMHome_SendError+0x44>
	}
	else {
		local_from.port=from->port;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	785b      	ldrb	r3, [r3, #1]
 800150e:	757b      	strb	r3, [r7, #21]
	}

	TxHeaderPtr = CAN_TxHeader_Create(&local_send_to, &local_from, CAN_CMD_ERROR, true);
 8001510:	f107 0114 	add.w	r1, r7, #20
 8001514:	f107 0018 	add.w	r0, r7, #24
 8001518:	2301      	movs	r3, #1
 800151a:	2209      	movs	r2, #9
 800151c:	f7ff fc0c 	bl	8000d38 <CAN_TxHeader_Create>
 8001520:	61f8      	str	r0, [r7, #28]
	TxData[0] = (uint8_t) (rc_value >> 8);
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b29b      	uxth	r3, r3
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <SMHome_SendError+0x8c>)
 800152c:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t) rc_value;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <SMHome_SendError+0x8c>)
 8001534:	705a      	strb	r2, [r3, #1]
	TxHeaderPtr->DLC = 2;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2202      	movs	r2, #2
 800153a:	611a      	str	r2, [r3, #16]

    if ( CAN_Send_Packet(TxHeaderPtr,TxData) != IS_OK) {
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <SMHome_SendError+0x8c>)
 800153e:	69f8      	ldr	r0, [r7, #28]
 8001540:	f7ff f812 	bl	8000568 <CAN_Send_Packet>
//    	return RC_CAN_TRANSMIT_ERR;
    }

	return IS_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000013c 	.word	0x2000013c
 8001554:	20000138 	.word	0x20000138
 8001558:	2000016c 	.word	0x2000016c

0800155c <Sensor_DB_Init>:
uint8_t SMH_ADC_TotChannels = 0;

/**
 *    Initialize in mem sensor DB
 */
void Sensor_DB_Init() {
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af04      	add	r7, sp, #16
	SMH_SensorListElTypeDef* cur_el;
	SMH_SensorDescrTypeDef* record;

	SENSOR_DB = (SMH_SensorListElTypeDef*) malloc(sizeof(SMH_SensorListElTypeDef));
 8001562:	2008      	movs	r0, #8
 8001564:	f004 fcae 	bl	8005ec4 <malloc>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b6c      	ldr	r3, [pc, #432]	; (8001720 <Sensor_DB_Init+0x1c4>)
 800156e:	601a      	str	r2, [r3, #0]


	record = Sensor_Init(SW1,"SW1",SENSOR_DIGITAL,SENSOR_IN, 'B', GPIO_PIN_11, ADC_CHANNEL_0);
 8001570:	2300      	movs	r3, #0
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2342      	movs	r3, #66	; 0x42
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	2200      	movs	r2, #0
 8001582:	4968      	ldr	r1, [pc, #416]	; (8001724 <Sensor_DB_Init+0x1c8>)
 8001584:	2001      	movs	r0, #1
 8001586:	f000 f997 	bl	80018b8 <Sensor_Init>
 800158a:	6078      	str	r0, [r7, #4]
	SENSOR_DB->el = record;
 800158c:	4b64      	ldr	r3, [pc, #400]	; (8001720 <Sensor_DB_Init+0x1c4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]

	record = Sensor_Init(SW2,"SW2",SENSOR_DIGITAL,SENSOR_IN, 'B', GPIO_PIN_10, ADC_CHANNEL_0);
 8001594:	2300      	movs	r3, #0
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	2342      	movs	r3, #66	; 0x42
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	2200      	movs	r2, #0
 80015a6:	4960      	ldr	r1, [pc, #384]	; (8001728 <Sensor_DB_Init+0x1cc>)
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 f985 	bl	80018b8 <Sensor_Init>
 80015ae:	6078      	str	r0, [r7, #4]
	cur_el = SMH_SensorDB_Add(SENSOR_DB,record);
 80015b0:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <Sensor_DB_Init+0x1c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f966 	bl	8001888 <SMH_SensorDB_Add>
 80015bc:	6038      	str	r0, [r7, #0]

	record = Sensor_Init(SN1,"SN1",SENSOR_DIGITAL,SENSOR_IN, 'B', GPIO_PIN_2, ADC_CHANNEL_0);
 80015be:	2300      	movs	r3, #0
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2304      	movs	r3, #4
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	2342      	movs	r3, #66	; 0x42
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2301      	movs	r3, #1
 80015cc:	2200      	movs	r2, #0
 80015ce:	4957      	ldr	r1, [pc, #348]	; (800172c <Sensor_DB_Init+0x1d0>)
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f971 	bl	80018b8 <Sensor_Init>
 80015d6:	6078      	str	r0, [r7, #4]
	cur_el = SMH_SensorDB_Add(cur_el,record);
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f000 f954 	bl	8001888 <SMH_SensorDB_Add>
 80015e0:	6038      	str	r0, [r7, #0]

	record = Sensor_Init(SN2,"SN2",SENSOR_DIGITAL,SENSOR_IN, 'B', GPIO_PIN_1, ADC_CHANNEL_9);
 80015e2:	2309      	movs	r3, #9
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	2302      	movs	r3, #2
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	2342      	movs	r3, #66	; 0x42
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	2200      	movs	r2, #0
 80015f2:	494f      	ldr	r1, [pc, #316]	; (8001730 <Sensor_DB_Init+0x1d4>)
 80015f4:	2004      	movs	r0, #4
 80015f6:	f000 f95f 	bl	80018b8 <Sensor_Init>
 80015fa:	6078      	str	r0, [r7, #4]
	cur_el = SMH_SensorDB_Add(cur_el,record);
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f000 f942 	bl	8001888 <SMH_SensorDB_Add>
 8001604:	6038      	str	r0, [r7, #0]

	record = Sensor_Init(UTX,"UTX",SENSOR_ANALOG,SENSOR_OUT, 'A', GPIO_PIN_2, ADC_CHANNEL_2);
 8001606:	2302      	movs	r3, #2
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2304      	movs	r3, #4
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	2341      	movs	r3, #65	; 0x41
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	2201      	movs	r2, #1
 8001616:	4947      	ldr	r1, [pc, #284]	; (8001734 <Sensor_DB_Init+0x1d8>)
 8001618:	2005      	movs	r0, #5
 800161a:	f000 f94d 	bl	80018b8 <Sensor_Init>
 800161e:	6078      	str	r0, [r7, #4]
	cur_el = SMH_SensorDB_Add(cur_el,record);
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	6838      	ldr	r0, [r7, #0]
 8001624:	f000 f930 	bl	8001888 <SMH_SensorDB_Add>
 8001628:	6038      	str	r0, [r7, #0]

	record = Sensor_Init(RL1,"RL1",SENSOR_DIGITAL,SENSOR_OUT, 'B', GPIO_PIN_9, ADC_CHANNEL_0);
 800162a:	2300      	movs	r3, #0
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2342      	movs	r3, #66	; 0x42
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	2200      	movs	r2, #0
 800163c:	493e      	ldr	r1, [pc, #248]	; (8001738 <Sensor_DB_Init+0x1dc>)
 800163e:	2006      	movs	r0, #6
 8001640:	f000 f93a 	bl	80018b8 <Sensor_Init>
 8001644:	6078      	str	r0, [r7, #4]
	cur_el = SMH_SensorDB_Add(cur_el,record);
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f000 f91d 	bl	8001888 <SMH_SensorDB_Add>
 800164e:	6038      	str	r0, [r7, #0]
	record->isLocked = true;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	721a      	strb	r2, [r3, #8]

	record= Sensor_Init(RL2,"RL2",SENSOR_DIGITAL,SENSOR_OUT, 'B', GPIO_PIN_8, ADC_CHANNEL_0);
 8001656:	2300      	movs	r3, #0
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2342      	movs	r3, #66	; 0x42
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2200      	movs	r2, #0
 8001668:	4934      	ldr	r1, [pc, #208]	; (800173c <Sensor_DB_Init+0x1e0>)
 800166a:	2007      	movs	r0, #7
 800166c:	f000 f924 	bl	80018b8 <Sensor_Init>
 8001670:	6078      	str	r0, [r7, #4]
	cur_el = SMH_SensorDB_Add(cur_el,record);
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f000 f907 	bl	8001888 <SMH_SensorDB_Add>
 800167a:	6038      	str	r0, [r7, #0]
	record->isLocked = true;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	721a      	strb	r2, [r3, #8]

	//   PA15 port;  pin  on chip 38
	record = Sensor_Init(ACSENS,"ACSN",SENSOR_ANALOG,SENSOR_IN, 'A', GPIO_PIN_15,ADC_CHANNEL_0);
 8001682:	2300      	movs	r3, #0
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2341      	movs	r3, #65	; 0x41
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	2201      	movs	r2, #1
 8001694:	492a      	ldr	r1, [pc, #168]	; (8001740 <Sensor_DB_Init+0x1e4>)
 8001696:	2009      	movs	r0, #9
 8001698:	f000 f90e 	bl	80018b8 <Sensor_Init>
 800169c:	6078      	str	r0, [r7, #4]
	record->isLocked = true;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	721a      	strb	r2, [r3, #8]
	cur_el = SMH_SensorDB_Add(cur_el, record);
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f000 f8ee 	bl	8001888 <SMH_SensorDB_Add>
 80016ac:	6038      	str	r0, [r7, #0]


	record = Sensor_Init(TEMP1,"TEMP1",SENSOR_ANALOG,SENSOR_IN, '-', 0, ADC_CHANNEL_TEMPSENSOR);
 80016ae:	2310      	movs	r3, #16
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2300      	movs	r3, #0
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	232d      	movs	r3, #45	; 0x2d
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	2201      	movs	r2, #1
 80016be:	4921      	ldr	r1, [pc, #132]	; (8001744 <Sensor_DB_Init+0x1e8>)
 80016c0:	2008      	movs	r0, #8
 80016c2:	f000 f8f9 	bl	80018b8 <Sensor_Init>
 80016c6:	6078      	str	r0, [r7, #4]
	record->isLocked = true;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	721a      	strb	r2, [r3, #8]
	record->status = SENSOR_UP;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	705a      	strb	r2, [r3, #1]
	Sensor_SetPolling(record, 5);
 80016d4:	2105      	movs	r1, #5
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f961 	bl	800199e <Sensor_SetPolling>
	cur_el = SMH_SensorDB_Add(cur_el, record);
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	6838      	ldr	r0, [r7, #0]
 80016e0:	f000 f8d2 	bl	8001888 <SMH_SensorDB_Add>
 80016e4:	6038      	str	r0, [r7, #0]

	record = Sensor_Init(VREF,"VREF",SENSOR_ANALOG,SENSOR_IN, '-', 0, ADC_CHANNEL_VREFINT);
 80016e6:	2311      	movs	r3, #17
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2300      	movs	r3, #0
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	232d      	movs	r3, #45	; 0x2d
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2301      	movs	r3, #1
 80016f4:	2201      	movs	r2, #1
 80016f6:	4914      	ldr	r1, [pc, #80]	; (8001748 <Sensor_DB_Init+0x1ec>)
 80016f8:	200a      	movs	r0, #10
 80016fa:	f000 f8dd 	bl	80018b8 <Sensor_Init>
 80016fe:	6078      	str	r0, [r7, #4]
	record->isLocked = true;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	721a      	strb	r2, [r3, #8]
	record->status = SENSOR_UP;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	705a      	strb	r2, [r3, #1]
	cur_el = SMH_SensorDB_Add(cur_el, record);
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f000 f8ba 	bl	8001888 <SMH_SensorDB_Add>
 8001714:	6038      	str	r0, [r7, #0]
	//	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
	//	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
	//	HAL_NVIC_EnableIRQ(EXTI2_IRQn);

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000174 	.word	0x20000174
 8001724:	08006188 	.word	0x08006188
 8001728:	0800618c 	.word	0x0800618c
 800172c:	08006190 	.word	0x08006190
 8001730:	08006194 	.word	0x08006194
 8001734:	08006198 	.word	0x08006198
 8001738:	0800619c 	.word	0x0800619c
 800173c:	080061a0 	.word	0x080061a0
 8001740:	080061a4 	.word	0x080061a4
 8001744:	080061ac 	.word	0x080061ac
 8001748:	080061b4 	.word	0x080061b4

0800174c <EXTI15_10_IRQHandler>:

/**
 *    Common interrupt handler for all activated PINS. ( Check By DB )
 */
void EXTI15_10_IRQHandler(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001750:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001754:	f003 f91e 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001758:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800175c:	f003 f91a 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001768:	2001      	movs	r0, #1
 800176a:	f003 f913 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}

08001772 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001776:	2002      	movs	r0, #2
 8001778:	f003 f90c 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001784:	2004      	movs	r0, #4
 8001786:	f003 f905 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_GPIO_EXTI_Callback>:
 *    Final callback for interrupt handling.
 *    Used for sending event when digital input PIN was switched UP/DOWN
 * @param GPIO_Pin
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	80fb      	strh	r3, [r7, #6]

	SMH_SensorDescrTypeDef* sensor = GetSensorByPinNum(GPIO_Pin);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 faa4 	bl	8001ce8 <GetSensorByPinNum>
 80017a0:	6178      	str	r0, [r7, #20]

	if ((sensor != NULL) && ( ! sensor->isAnalog) && sensor->isInput) {
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d04a      	beq.n	800183e <HAL_GPIO_EXTI_Callback+0xb0>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	795b      	ldrb	r3, [r3, #5]
 80017ac:	f083 0301 	eor.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d043      	beq.n	800183e <HAL_GPIO_EXTI_Callback+0xb0>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	799b      	ldrb	r3, [r3, #6]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03f      	beq.n	800183e <HAL_GPIO_EXTI_Callback+0xb0>

		SMH_SensValueReply_t state;
		state.value = HAL_GPIO_ReadPin(GetPortNum(sensor->pinPort), sensor->pinNum);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	7d1b      	ldrb	r3, [r3, #20]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f840 	bl	8001848 <GetPortNum>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	8a5b      	ldrh	r3, [r3, #18]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f003 f8af 	bl	8004934 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29b      	uxth	r3, r3
 80017da:	81bb      	strh	r3, [r7, #12]

		if ((getUpTime() - sensor->switchTime ) > 200 ) {
 80017dc:	f7ff f9f4 	bl	8000bc8 <getUpTime>
 80017e0:	4602      	mov	r2, r0
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2bc8      	cmp	r3, #200	; 0xc8
 80017ea:	d928      	bls.n	800183e <HAL_GPIO_EXTI_Callback+0xb0>
			SMH_SensorDOThresholds(sensor,state.value==0);    // value==0  toLow, value==1  toHigh
 80017ec:	89bb      	ldrh	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf0c      	ite	eq
 80017f2:	2301      	moveq	r3, #1
 80017f4:	2300      	movne	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f000 fbde 	bl	8001fbc <SMH_SensorDOThresholds>

			if (((sensor->isEventOnLow) && (state.value == 0))  ||
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	789b      	ldrb	r3, [r3, #2]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_EXTI_Callback+0x80>
 8001808:	89bb      	ldrh	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_GPIO_EXTI_Callback+0x8e>
					((sensor->isEventOnHigh) && (state.value == 1))) {
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	78db      	ldrb	r3, [r3, #3]
			if (((sensor->isEventOnLow) && (state.value == 0))  ||
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <HAL_GPIO_EXTI_Callback+0x9e>
					((sensor->isEventOnHigh) && (state.value == 1))) {
 8001816:	89bb      	ldrh	r3, [r7, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_GPIO_EXTI_Callback+0x9e>
				SMHome_SendSensorValue(sensor->id, &state);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f107 020c 	add.w	r2, r7, #12
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fdda 	bl	80013e0 <SMHome_SendSensorValue>
			}

			sensor->switchCurState = state.value;
 800182c:	89bb      	ldrh	r3, [r7, #12]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	771a      	strb	r2, [r3, #28]
			sensor->switchTime = getUpTime();
 8001834:	f7ff f9c8 	bl	8000bc8 <getUpTime>
 8001838:	4602      	mov	r2, r0
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	619a      	str	r2, [r3, #24]

		}
	}
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <GetPortNum>:
/**
 *  Convert PORT letter to internal port id
 * @param portName
 * @return
 */
GPIO_TypeDef* GetPortNum(char portName) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]

	if (portName == 'A') {
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b41      	cmp	r3, #65	; 0x41
 8001856:	d101      	bne.n	800185c <GetPortNum+0x14>
		return GPIOA;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <GetPortNum+0x34>)
 800185a:	e00a      	b.n	8001872 <GetPortNum+0x2a>
	}
	else if (portName == 'B') {
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2b42      	cmp	r3, #66	; 0x42
 8001860:	d101      	bne.n	8001866 <GetPortNum+0x1e>
		return GPIOB;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <GetPortNum+0x38>)
 8001864:	e005      	b.n	8001872 <GetPortNum+0x2a>
	}
	else if (portName == 'C') {
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b43      	cmp	r3, #67	; 0x43
 800186a:	d101      	bne.n	8001870 <GetPortNum+0x28>
		return GPIOC;
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <GetPortNum+0x3c>)
 800186e:	e000      	b.n	8001872 <GetPortNum+0x2a>
	}
	return GPIOB;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <GetPortNum+0x38>)
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00
 8001884:	40011000 	.word	0x40011000

08001888 <SMH_SensorDB_Add>:
 * Append sensor record in DB
 * @param last_el
 * @param SensorDescr
 * @return
 */
SMH_SensorListElTypeDef* SMH_SensorDB_Add(SMH_SensorListElTypeDef* last_el, SMH_SensorDescrTypeDef *SensorDescr) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]

	SMH_SensorListElTypeDef* el = (SMH_SensorListElTypeDef*) malloc(sizeof(SMH_SensorListElTypeDef));
 8001892:	2008      	movs	r0, #8
 8001894:	f004 fb16 	bl	8005ec4 <malloc>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]
	last_el->next = el;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	605a      	str	r2, [r3, #4]
	el->el = SensorDescr;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	601a      	str	r2, [r3, #0]
	el->next = NULL;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
	return el;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <Sensor_Init>:
 */

SMH_SensorDescrTypeDef* Sensor_Init( SensorID_t id, char* name,
		bool isAnalog, bool direction, char port, uint16_t pin, uint32_t channel
)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6039      	str	r1, [r7, #0]
 80018c0:	4611      	mov	r1, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	460b      	mov	r3, r1
 80018ca:	71bb      	strb	r3, [r7, #6]
 80018cc:	4613      	mov	r3, r2
 80018ce:	717b      	strb	r3, [r7, #5]

	SMH_SensorDescrTypeDef* sensor = (SMH_SensorDescrTypeDef*) malloc(sizeof(SMH_SensorDescrTypeDef));
 80018d0:	202c      	movs	r0, #44	; 0x2c
 80018d2:	f004 faf7 	bl	8005ec4 <malloc>
 80018d6:	4603      	mov	r3, r0
 80018d8:	60bb      	str	r3, [r7, #8]
	if (sensor == NULL) {
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <Sensor_Init+0x32>
		SMHome_error(RC_NO_MEM);
 80018e0:	206a      	movs	r0, #106	; 0x6a
 80018e2:	f7ff f9a3 	bl	8000c2c <SMHome_error>
		return NULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e055      	b.n	8001996 <Sensor_Init+0xde>
	}

	sensor->id = id;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	701a      	strb	r2, [r3, #0]
	for ( int i=0; i < SENSOR_NAME_LEN ; i++ ) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e01a      	b.n	800192c <Sensor_Init+0x74>
		if ( i >= strlen(name)) {
 80018f6:	6838      	ldr	r0, [r7, #0]
 80018f8:	f7fe fc28 	bl	800014c <strlen>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d806      	bhi.n	8001912 <Sensor_Init+0x5a>
			sensor->name[i] = ' ';
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	3309      	adds	r3, #9
 800190c:	2220      	movs	r2, #32
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e009      	b.n	8001926 <Sensor_Init+0x6e>
		}
		else {
			sensor->name[i] = name[i];
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	7819      	ldrb	r1, [r3, #0]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	3309      	adds	r3, #9
 8001922:	460a      	mov	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
	for ( int i=0; i < SENSOR_NAME_LEN ; i++ ) {
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3301      	adds	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	dde1      	ble.n	80018f6 <Sensor_Init+0x3e>
		}
	}
	sensor->status = SENSOR_DOWN;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2200      	movs	r2, #0
 8001936:	705a      	strb	r2, [r3, #1]
	sensor->isLocked = false;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	721a      	strb	r2, [r3, #8]
	sensor->isAnalog = isAnalog;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	79ba      	ldrb	r2, [r7, #6]
 8001942:	715a      	strb	r2, [r3, #5]
	sensor->isInput = direction;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	797a      	ldrb	r2, [r7, #5]
 8001948:	719a      	strb	r2, [r3, #6]
	sensor->pinNum = pin;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	8bba      	ldrh	r2, [r7, #28]
 800194e:	825a      	strh	r2, [r3, #18]
	sensor->pinPort = port;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	7e3a      	ldrb	r2, [r7, #24]
 8001954:	751a      	strb	r2, [r3, #20]
	sensor->isExternal = true;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2201      	movs	r2, #1
 800195a:	71da      	strb	r2, [r3, #7]
	sensor->isPolling = false;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2200      	movs	r2, #0
 8001960:	711a      	strb	r2, [r3, #4]
	sensor->isEventOnLow = false;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
	sensor->isEventOnHigh = false;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	70da      	strb	r2, [r3, #3]

	sensor->adcChannel = channel;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	621a      	str	r2, [r3, #32]
	sensor->adcRank = 0;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	sensor->switchCurState = 0;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2200      	movs	r2, #0
 8001980:	771a      	strb	r2, [r3, #28]
	sensor->switchTime = 0;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]

	sensor->pollingInterval = 0;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	81da      	strh	r2, [r3, #14]
	sensor->lastPollingTime = 0;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2200      	movs	r2, #0
 8001992:	821a      	strh	r2, [r3, #16]

	return 	sensor;
 8001994:	68bb      	ldr	r3, [r7, #8]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <Sensor_SetPolling>:
/**
 * @brief Configure sensor polling interval
 * @param sensor
 * @param period
 */
uint8_t Sensor_SetPolling(SMH_SensorDescrTypeDef* sensor, uint16_t period) {
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	807b      	strh	r3, [r7, #2]
	uint8_t rc = IS_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
	sensor->pollingInterval = period;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	81da      	strh	r2, [r3, #14]

	if ( ! sensor->isInput ) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	799b      	ldrb	r3, [r3, #6]
 80019b8:	f083 0301 	eor.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <Sensor_SetPolling+0x28>
		return RC_SENSOR_WRONG_TYPE;
 80019c2:	2365      	movs	r3, #101	; 0x65
 80019c4:	e010      	b.n	80019e8 <Sensor_SetPolling+0x4a>
	}

	if ( period > 0 )
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <Sensor_SetPolling+0x36>
		sensor->isPolling = true;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	711a      	strb	r2, [r3, #4]
 80019d2:	e002      	b.n	80019da <Sensor_SetPolling+0x3c>
	else
		sensor->isPolling = false;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	711a      	strb	r2, [r3, #4]

	if ( sensor->isAnalog ) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	795b      	ldrb	r3, [r3, #5]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <Sensor_SetPolling+0x48>
		SMH_ADC_RunConversation();
 80019e2:	f000 f9a7 	bl	8001d34 <SMH_ADC_RunConversation>
	}
	return rc;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <Sensor_SetThreshold>:
uint8_t Sensor_SetThreshold(SMH_SensorDescrTypeDef* sensor,
		uint8_t ruleId,
		bool isToLow,
		uint16_t thValue,
		SensorID_t sensorId,
		uint16_t sensorValue ) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	70fb      	strb	r3, [r7, #3]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70bb      	strb	r3, [r7, #2]
 8001a06:	4613      	mov	r3, r2
 8001a08:	803b      	strh	r3, [r7, #0]

	SMH_SensorThreshold_t* threshold = NULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]


	if   ( ! sensor->isInput ) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	799b      	ldrb	r3, [r3, #6]
 8001a12:	f083 0301 	eor.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <Sensor_SetThreshold+0x30>
		return RC_SENSOR_WRONG_TYPE;
 8001a1c:	2365      	movs	r3, #101	; 0x65
 8001a1e:	e056      	b.n	8001ace <Sensor_SetThreshold+0xde>
	}

	threshold = (SMH_SensorThreshold_t*) malloc(sizeof(SMH_SensorThreshold_t));
 8001a20:	200c      	movs	r0, #12
 8001a22:	f004 fa4f 	bl	8005ec4 <malloc>
 8001a26:	4603      	mov	r3, r0
 8001a28:	617b      	str	r3, [r7, #20]
	if (threshold == NULL) {
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <Sensor_SetThreshold+0x44>
		return RC_NO_MEM;
 8001a30:	236a      	movs	r3, #106	; 0x6a
 8001a32:	e04c      	b.n	8001ace <Sensor_SetThreshold+0xde>
	}
	threshold->ruleId = ruleId;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	78fa      	ldrb	r2, [r7, #3]
 8001a38:	701a      	strb	r2, [r3, #0]
	threshold->next = NULL;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	threshold->isToLow = isToLow;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	78ba      	ldrb	r2, [r7, #2]
 8001a44:	705a      	strb	r2, [r3, #1]
	threshold->thVaue = thValue;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	883a      	ldrh	r2, [r7, #0]
 8001a4a:	805a      	strh	r2, [r3, #2]
	threshold->sensorId = sensorId;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a52:	711a      	strb	r2, [r3, #4]
	threshold->sensorValue = sensorValue;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a58:	80da      	strh	r2, [r3, #6]


	if (sensor->thList == NULL ) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <Sensor_SetThreshold+0x7a>
		sensor->thList = threshold;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
 8001a68:	e030      	b.n	8001acc <Sensor_SetThreshold+0xdc>
	}
	else {
		SMH_SensorThreshold_t* curr = sensor->thList;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	613b      	str	r3, [r7, #16]
		SMH_SensorThreshold_t* lastInList;
		bool isRuleFound = false;
 8001a70:	2300      	movs	r3, #0
 8001a72:	72fb      	strb	r3, [r7, #11]

		while (curr != NULL) {
 8001a74:	e01e      	b.n	8001ab4 <Sensor_SetThreshold+0xc4>
			if ( curr->ruleId == ruleId) {
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d114      	bne.n	8001aaa <Sensor_SetThreshold+0xba>
				curr->isToLow = isToLow;
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	78ba      	ldrb	r2, [r7, #2]
 8001a84:	705a      	strb	r2, [r3, #1]
				curr->thVaue = thValue;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	883a      	ldrh	r2, [r7, #0]
 8001a8a:	805a      	strh	r2, [r3, #2]
				curr->sensorId = sensorId;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a92:	711a      	strb	r2, [r3, #4]
				curr->sensorValue = sensorValue;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a98:	80da      	strh	r2, [r3, #6]
				free(threshold);
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f004 fa1a 	bl	8005ed4 <free>
				threshold = curr;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	617b      	str	r3, [r7, #20]
				isRuleFound = true;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	72fb      	strb	r3, [r7, #11]
				break;
 8001aa8:	e007      	b.n	8001aba <Sensor_SetThreshold+0xca>
			}
			lastInList = curr;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	60fb      	str	r3, [r7, #12]
			curr = curr->next;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	613b      	str	r3, [r7, #16]
		while (curr != NULL) {
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1dd      	bne.n	8001a76 <Sensor_SetThreshold+0x86>
		}
		if ( ! isRuleFound ) {
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <Sensor_SetThreshold+0xdc>
			lastInList->next = threshold;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	609a      	str	r2, [r3, #8]
		}
	}
	return IS_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <Sensor_ClearThreshold>:
 *
 * @param sensor
 * @param ruleId
 * @return
 */
uint8_t Sensor_ClearThreshold(SMH_SensorDescrTypeDef* sensor, uint8_t ruleId) {
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70fb      	strb	r3, [r7, #3]

	if (sensor->thList == NULL ) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <Sensor_ClearThreshold+0x18>
		return IS_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e023      	b.n	8001b36 <Sensor_ClearThreshold+0x60>
	}

	SMH_SensorThreshold_t* curr = sensor->thList;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	60fb      	str	r3, [r7, #12]
	SMH_SensorThreshold_t* prev = NULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]

	while (curr != NULL) {
 8001af8:	e019      	b.n	8001b2e <Sensor_ClearThreshold+0x58>
		if (curr->ruleId == ruleId) {
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10f      	bne.n	8001b24 <Sensor_ClearThreshold+0x4e>
			if (prev == NULL) {              //  if 'prev' no defined it mean we are on first element
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d104      	bne.n	8001b14 <Sensor_ClearThreshold+0x3e>
				sensor->thList = curr->next;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
 8001b12:	e003      	b.n	8001b1c <Sensor_ClearThreshold+0x46>
			}
			else {
				prev->next = curr->next;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	609a      	str	r2, [r3, #8]
			}
			free(curr);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f004 f9d9 	bl	8005ed4 <free>
			break;
 8001b22:	e007      	b.n	8001b34 <Sensor_ClearThreshold+0x5e>
		}
		prev = curr;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	60bb      	str	r3, [r7, #8]
		curr = curr->next;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e2      	bne.n	8001afa <Sensor_ClearThreshold+0x24>
	}
	return IS_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <Sensor_OFF>:
 *
 * @param sensor
 * @return
 */

uint8_t Sensor_OFF(SMH_SensorDescrTypeDef* sensor) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]

	//	sensor->SendEvents = SENSOR_EVT_OFF;

	if ( sensor->pinPort != '-') {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7d1b      	ldrb	r3, [r3, #20]
 8001b4a:	2b2d      	cmp	r3, #45	; 0x2d
 8001b4c:	d00b      	beq.n	8001b66 <Sensor_OFF+0x28>
		HAL_GPIO_DeInit(GetPortNum(sensor->pinPort), sensor->pinNum);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7d1b      	ldrb	r3, [r3, #20]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe78 	bl	8001848 <GetPortNum>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8a5b      	ldrh	r3, [r3, #18]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f002 fe33 	bl	80047cc <HAL_GPIO_DeInit>
	if ( sensor->id == UTX ) {
		HAL_UART_MspInit(&huart2);
	}
#endif

	if ( sensor->isInput) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	799b      	ldrb	r3, [r3, #6]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <Sensor_OFF+0x4e>
		if ( sensor->pinNum == GPIO_PIN_1 ) {
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	8a5b      	ldrh	r3, [r3, #18]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <Sensor_OFF+0x40>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001b76:	2007      	movs	r0, #7
 8001b78:	f002 fa0b 	bl	8003f92 <HAL_NVIC_DisableIRQ>
 8001b7c:	e006      	b.n	8001b8c <Sensor_OFF+0x4e>
		}
		else if (sensor->pinNum == GPIO_PIN_2 ) {
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	8a5b      	ldrh	r3, [r3, #18]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d102      	bne.n	8001b8c <Sensor_OFF+0x4e>
			HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8001b86:	2008      	movs	r0, #8
 8001b88:	f002 fa03 	bl	8003f92 <HAL_NVIC_DisableIRQ>
		}
	}

	sensor->status = SENSOR_DOWN;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
	return IS_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <Sensor_ON>:
 * Switch sensor ON
 *
 * @param sensor
 * @return
 */
uint8_t Sensor_ON(SMH_SensorDescrTypeDef* sensor) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]

	if ( sensor->pinPort == '-') {
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7d1b      	ldrb	r3, [r3, #20]
 8001bb6:	2b2d      	cmp	r3, #45	; 0x2d
 8001bb8:	d104      	bne.n	8001bc4 <Sensor_ON+0x28>
		sensor->status = SENSOR_UP;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	705a      	strb	r2, [r3, #1]
		return IS_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e06b      	b.n	8001c9c <Sensor_ON+0x100>
#endif

	/**
	 *   Clear current pin settings
	 */
	HAL_GPIO_DeInit(GetPortNum(sensor->pinPort),sensor->pinPort);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7d1b      	ldrb	r3, [r3, #20]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe3d 	bl	8001848 <GetPortNum>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7d1b      	ldrb	r3, [r3, #20]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f002 fdf8 	bl	80047cc <HAL_GPIO_DeInit>
	GPIO_InitStruct.Pin = sensor->pinNum;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8a5b      	ldrh	r3, [r3, #18]
 8001be0:	60bb      	str	r3, [r7, #8]
	//	}

	/**
	 *     Setup ANALOG pin/port settings
	 */
	if (sensor->isAnalog) {
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <Sensor_ON+0x54>
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bea:	2303      	movs	r3, #3
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e045      	b.n	8001c7c <Sensor_ON+0xe0>
	/**
	 *     Setup DIGITAL pin/port settings
	 */
	else {
		/**   Digital Input */
		if (sensor->isInput) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	799b      	ldrb	r3, [r3, #6]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d030      	beq.n	8001c5a <Sensor_ON+0xbe>
			GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;  // GPIO_MODE_IT_RISING_FALLING | GPIO_MODE_IT_RISING
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <Sensor_ON+0x108>)
 8001bfa:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;                  //
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]

			if ( sensor->pinNum == GPIO_PIN_1 ) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	8a5b      	ldrh	r3, [r3, #18]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d108      	bne.n	8001c1a <Sensor_ON+0x7e>
				HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c08:	2007      	movs	r0, #7
 8001c0a:	f002 f9b4 	bl	8003f76 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_SetPriority(EXTI1_IRQn, 0x1, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2101      	movs	r1, #1
 8001c12:	2007      	movs	r0, #7
 8001c14:	f002 f993 	bl	8003f3e <HAL_NVIC_SetPriority>
 8001c18:	e030      	b.n	8001c7c <Sensor_ON+0xe0>
			} else if (sensor->pinNum == GPIO_PIN_2 ) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	8a5b      	ldrh	r3, [r3, #18]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d108      	bne.n	8001c34 <Sensor_ON+0x98>
				HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c22:	2008      	movs	r0, #8
 8001c24:	f002 f9a7 	bl	8003f76 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_SetPriority(EXTI2_IRQn, 0x1, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2008      	movs	r0, #8
 8001c2e:	f002 f986 	bl	8003f3e <HAL_NVIC_SetPriority>
 8001c32:	e023      	b.n	8001c7c <Sensor_ON+0xe0>
			} else if ((sensor->pinNum >= GPIO_PIN_10 ) && (sensor->pinNum <=  GPIO_PIN_15)) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	8a5b      	ldrh	r3, [r3, #18]
 8001c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3c:	d31e      	bcc.n	8001c7c <Sensor_ON+0xe0>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	8a5b      	ldrh	r3, [r3, #18]
 8001c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c46:	d819      	bhi.n	8001c7c <Sensor_ON+0xe0>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c48:	2028      	movs	r0, #40	; 0x28
 8001c4a:	f002 f994 	bl	8003f76 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0x1, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	2028      	movs	r0, #40	; 0x28
 8001c54:	f002 f973 	bl	8003f3e <HAL_NVIC_SetPriority>
 8001c58:	e010      	b.n	8001c7c <Sensor_ON+0xe0>
			}
		}
		/**   Digital Output */
		else {
			HAL_GPIO_WritePin(GetPortNum(sensor->pinPort), sensor->pinNum, GPIO_PIN_RESET);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7d1b      	ldrb	r3, [r3, #20]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fdf2 	bl	8001848 <GetPortNum>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8a5b      	ldrh	r3, [r3, #18]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f002 fe79 	bl	8004962 <HAL_GPIO_WritePin>
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c74:	2302      	movs	r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	617b      	str	r3, [r7, #20]
		}
	}

	HAL_GPIO_Init(GetPortNum(sensor->pinPort), &GPIO_InitStruct);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7d1b      	ldrb	r3, [r3, #20]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fde1 	bl	8001848 <GetPortNum>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f002 fc20 	bl	80044d4 <HAL_GPIO_Init>
	sensor->status = SENSOR_UP;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	705a      	strb	r2, [r3, #1]
	return IS_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	10310000 	.word	0x10310000

08001ca8 <GetSensorByID>:
 * Search sensor definition by its ID
 *
 * @param sensor id
 * @return
 */
SMH_SensorDescrTypeDef* GetSensorByID(SensorID_t id) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]

	SMH_SensorListElTypeDef* cur = SENSOR_DB;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <GetSensorByID+0x3c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]

	while  (cur != 0) {
 8001cb8:	e00b      	b.n	8001cd2 <GetSensorByID+0x2a>
		if ( cur->el->id == id ) {
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	79fa      	ldrb	r2, [r7, #7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d102      	bne.n	8001ccc <GetSensorByID+0x24>
			return cur->el;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e006      	b.n	8001cda <GetSensorByID+0x32>
		}
		cur = cur->next;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
	while  (cur != 0) {
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f0      	bne.n	8001cba <GetSensorByID+0x12>
	}
	return NULL;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	20000174 	.word	0x20000174

08001ce8 <GetSensorByPinNum>:
 *   Select sensor by pin number
 *
 * @param sensors pin
 * @return
 */
SMH_SensorDescrTypeDef* GetSensorByPinNum(uint16_t pin) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
	SMH_SensorListElTypeDef* cur = SENSOR_DB;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <GetSensorByPinNum+0x48>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
	while  (cur != 0) {
 8001cf8:	e010      	b.n	8001d1c <GetSensorByPinNum+0x34>
		if ( cur->el->pinNum == pin ) {
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	8a5b      	ldrh	r3, [r3, #18]
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d107      	bne.n	8001d16 <GetSensorByPinNum+0x2e>
			if (cur->el->pinPort == 'B' ) {
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	7d1b      	ldrb	r3, [r3, #20]
 8001d0c:	2b42      	cmp	r3, #66	; 0x42
 8001d0e:	d102      	bne.n	8001d16 <GetSensorByPinNum+0x2e>
				return cur->el;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e006      	b.n	8001d24 <GetSensorByPinNum+0x3c>
			}
		}
		cur = cur->next;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]
	while  (cur != 0) {
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1eb      	bne.n	8001cfa <GetSensorByPinNum+0x12>
	}
	return NULL;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000174 	.word	0x20000174

08001d34 <SMH_ADC_RunConversation>:
/**
 *
 *    Configure  ADC Scan channels based on sensors params
 *
 */
void SMH_ADC_RunConversation() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
	SMH_SensorListElTypeDef* cur = SENSOR_DB;
 8001d3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <SMH_ADC_RunConversation+0x174>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]
	SMH_SensorDescrTypeDef* sensor;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d40:	463b      	mov	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
	uint8_t ch_total_count = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	74fb      	strb	r3, [r7, #19]

	if ( SMH_ConvResultArray != NULL) {
 8001d4e:	4b57      	ldr	r3, [pc, #348]	; (8001eac <SMH_ADC_RunConversation+0x178>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <SMH_ADC_RunConversation+0x2c>
		free(SMH_ConvResultArray);
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <SMH_ADC_RunConversation+0x178>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 f8ba 	bl	8005ed4 <free>
	}

	//	HAL_ADC_MspDeInit(&hadc1);
	HAL_ADC_Stop_DMA(&hadc1);
 8001d60:	4853      	ldr	r0, [pc, #332]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001d62:	f000 fe75 	bl	8002a50 <HAL_ADC_Stop_DMA>
	HAL_ADC_DeInit(&hadc1);
 8001d66:	4852      	ldr	r0, [pc, #328]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001d68:	f000 fcd2 	bl	8002710 <HAL_ADC_DeInit>

	/** Calculate amount of conversion channels
	 */
	while  (cur != 0) {
 8001d6c:	e017      	b.n	8001d9e <SMH_ADC_RunConversation+0x6a>
		sensor = cur->el;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]
		if (sensor->isAnalog && sensor->isInput  &&
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	795b      	ldrb	r3, [r3, #5]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <SMH_ADC_RunConversation+0x64>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	799b      	ldrb	r3, [r3, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <SMH_ADC_RunConversation+0x64>
				(sensor->adcChannel != ADC_CHANNEL_0) &&
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
		if (sensor->isAnalog && sensor->isInput  &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <SMH_ADC_RunConversation+0x64>
				(sensor->status = SENSOR_UP)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	705a      	strb	r2, [r3, #1]
		){
			ch_total_count++;
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	3301      	adds	r3, #1
 8001d96:	74fb      	strb	r3, [r7, #19]
		}
		cur = cur->next;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	617b      	str	r3, [r7, #20]
	while  (cur != 0) {
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e4      	bne.n	8001d6e <SMH_ADC_RunConversation+0x3a>
	}

	/** Configure ADC1
	 */
	hadc1.Instance = ADC1;
 8001da4:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001da6:	4a43      	ldr	r2, [pc, #268]	; (8001eb4 <SMH_ADC_RunConversation+0x180>)
 8001da8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001dc0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dc4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = ch_total_count;
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	4a38      	ldr	r2, [pc, #224]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001dd0:	6113      	str	r3, [r2, #16]

	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001dd2:	4837      	ldr	r0, [pc, #220]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001dd4:	f000 fbc4 	bl	8002560 <HAL_ADC_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <SMH_ADC_RunConversation+0xb4>
		SMHome_SendError(NULL, NULL, RC_SENSOR_CHCONF_ERR);
 8001dde:	226d      	movs	r2, #109	; 0x6d
 8001de0:	2100      	movs	r1, #0
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fb72 	bl	80014cc <SMHome_SendError>
	}

	/** Configure Channels
	 */
	cur = SENSOR_DB;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <SMH_ADC_RunConversation+0x174>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	617b      	str	r3, [r7, #20]
	uint8_t cur_adc_rank = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	74bb      	strb	r3, [r7, #18]

	while  (cur != 0) {
 8001df2:	e030      	b.n	8001e56 <SMH_ADC_RunConversation+0x122>
		sensor = cur->el;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
		if ((sensor->isAnalog) && sensor->isInput &&
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	795b      	ldrb	r3, [r3, #5]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d026      	beq.n	8001e50 <SMH_ADC_RunConversation+0x11c>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	799b      	ldrb	r3, [r3, #6]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d022      	beq.n	8001e50 <SMH_ADC_RunConversation+0x11c>
				(sensor->adcChannel != ADC_CHANNEL_0) &&
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
		if ((sensor->isAnalog) && sensor->isInput &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01e      	beq.n	8001e50 <SMH_ADC_RunConversation+0x11c>
				(sensor->status = SENSOR_UP)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	705a      	strb	r2, [r3, #1]
		){

			sConfig.Channel = sensor->adcChannel;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	603b      	str	r3, [r7, #0]
			sConfig.Rank = cur_adc_rank;
 8001e1e:	7cbb      	ldrb	r3, [r7, #18]
 8001e20:	607b      	str	r3, [r7, #4]
			sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001e22:	2304      	movs	r3, #4
 8001e24:	60bb      	str	r3, [r7, #8]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) == HAL_OK) {
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001e2c:	f000 fe78 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d107      	bne.n	8001e46 <SMH_ADC_RunConversation+0x112>
				sensor->adcRank = cur_adc_rank;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	7cba      	ldrb	r2, [r7, #18]
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				cur_adc_rank++;
 8001e3e:	7cbb      	ldrb	r3, [r7, #18]
 8001e40:	3301      	adds	r3, #1
 8001e42:	74bb      	strb	r3, [r7, #18]
 8001e44:	e004      	b.n	8001e50 <SMH_ADC_RunConversation+0x11c>
			}
			else {
				SMHome_SendError(NULL, NULL, RC_SENSOR_CHCONF_ERR);
 8001e46:	226d      	movs	r2, #109	; 0x6d
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fb3e 	bl	80014cc <SMHome_SendError>
			}
		}
		cur = cur->next;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	617b      	str	r3, [r7, #20]
	while  (cur != 0) {
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1cb      	bne.n	8001df4 <SMH_ADC_RunConversation+0xc0>
	}

	SMH_ADC_TotChannels = cur_adc_rank - 1;
 8001e5c:	7cbb      	ldrb	r3, [r7, #18]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <SMH_ADC_RunConversation+0x184>)
 8001e64:	701a      	strb	r2, [r3, #0]

	/** Prepare buffer for store result and start DMS conversation save
	 */

	SMH_ConvResultArray = (uint16_t*) malloc(sizeof(uint16_t) * SMH_ADC_TotChannels);
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <SMH_ADC_RunConversation+0x184>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 f829 	bl	8005ec4 <malloc>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <SMH_ADC_RunConversation+0x178>)
 8001e78:	601a      	str	r2, [r3, #0]
	if ( SMH_ConvResultArray == NULL) {
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <SMH_ADC_RunConversation+0x178>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <SMH_ADC_RunConversation+0x15a>
		SMHome_SendError(NULL, NULL, RC_NO_MEM);
 8001e82:	226a      	movs	r2, #106	; 0x6a
 8001e84:	2100      	movs	r1, #0
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fb20 	bl	80014cc <SMHome_SendError>
	}
	else {
		//		HAL_ADC_MspInit(&hadc1);
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)SMH_ConvResultArray,SMH_ADC_TotChannels);
	}
}
 8001e8c:	e007      	b.n	8001e9e <SMH_ADC_RunConversation+0x16a>
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)SMH_ConvResultArray,SMH_ADC_TotChannels);
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <SMH_ADC_RunConversation+0x178>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <SMH_ADC_RunConversation+0x184>)
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <SMH_ADC_RunConversation+0x17c>)
 8001e9a:	f000 fcfb 	bl	8002894 <HAL_ADC_Start_DMA>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000174 	.word	0x20000174
 8001eac:	20000180 	.word	0x20000180
 8001eb0:	20000078 	.word	0x20000078
 8001eb4:	40012400 	.word	0x40012400
 8001eb8:	20000184 	.word	0x20000184

08001ebc <SMH_SensorDOPolling>:
 *
 *  Loop through all polled sensors, get value end send over CAN
 *  Called from main loop.
 *
 */
void SMH_SensorDOPolling() {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0

	SMH_SensorListElTypeDef* sensor_ptr = SENSOR_DB;
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <SMH_SensorDOPolling+0xf8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	617b      	str	r3, [r7, #20]
	SMH_SensorDescrTypeDef* sensor;
	SMH_SensorDescrTypeDef* vref_sensor = GetSensorByID(VREF);
 8001ec8:	200a      	movs	r0, #10
 8001eca:	f7ff feed 	bl	8001ca8 <GetSensorByID>
 8001ece:	6138      	str	r0, [r7, #16]

	while  (sensor_ptr != 0) {
 8001ed0:	e067      	b.n	8001fa2 <SMH_SensorDOPolling+0xe6>
		sensor = sensor_ptr->el;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
		if ( (sensor->status == SENSOR_ON) &&
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	785b      	ldrb	r3, [r3, #1]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d05d      	beq.n	8001f9c <SMH_SensorDOPolling+0xe0>
				sensor->isInput && sensor->isPolling &&
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	799b      	ldrb	r3, [r3, #6]
		if ( (sensor->status == SENSOR_ON) &&
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d059      	beq.n	8001f9c <SMH_SensorDOPolling+0xe0>
				sensor->isInput && sensor->isPolling &&
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	791b      	ldrb	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d055      	beq.n	8001f9c <SMH_SensorDOPolling+0xe0>
				(sensor->pollingInterval > 0) ) {
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	89db      	ldrh	r3, [r3, #14]
				sensor->isInput && sensor->isPolling &&
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d051      	beq.n	8001f9c <SMH_SensorDOPolling+0xe0>

			sensor->lastPollingTime++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8a1b      	ldrh	r3, [r3, #16]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	821a      	strh	r2, [r3, #16]
			if (sensor->lastPollingTime > sensor->pollingInterval ) {
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8a1a      	ldrh	r2, [r3, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	89db      	ldrh	r3, [r3, #14]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d945      	bls.n	8001f9c <SMH_SensorDOPolling+0xe0>

				/**
				 *   Time to send polled value for this sensor.
				 */
				SMH_SensValueReply_t polled = {0,0,0};
 8001f10:	2300      	movs	r3, #0
 8001f12:	80bb      	strh	r3, [r7, #4]
 8001f14:	2300      	movs	r3, #0
 8001f16:	80fb      	strh	r3, [r7, #6]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	723b      	strb	r3, [r7, #8]
				if ( sensor->isAnalog ) {
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	795b      	ldrb	r3, [r3, #5]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d022      	beq.n	8001f6a <SMH_SensorDOPolling+0xae>
					if (vref_sensor->adcRank > 0)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <SMH_SensorDOPolling+0x8a>
						polled.vref = SMH_ConvResultArray[vref_sensor->adcRank-1];
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <SMH_SensorDOPolling+0xfc>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	80fb      	strh	r3, [r7, #6]

					if (sensor->adcRank > 0) {
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <SMH_SensorDOPolling+0xcc>
						polled.value = SMH_ConvResultArray[sensor->adcRank-1];
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <SMH_SensorDOPolling+0xfc>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	80bb      	strh	r3, [r7, #4]
 8001f68:	e00e      	b.n	8001f88 <SMH_SensorDOPolling+0xcc>
					}
				}
				else {
					polled.value = HAL_GPIO_ReadPin(GetPortNum(sensor->pinPort), sensor->pinNum);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	7d1b      	ldrb	r3, [r3, #20]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fc6a 	bl	8001848 <GetPortNum>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8a5b      	ldrh	r3, [r3, #18]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f002 fcd9 	bl	8004934 <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	80bb      	strh	r3, [r7, #4]
				}

				SMHome_SendSensorValue(sensor->id, &polled);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	1d3a      	adds	r2, r7, #4
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fa25 	bl	80013e0 <SMHome_SendSensorValue>
				sensor->lastPollingTime=0;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	821a      	strh	r2, [r3, #16]
			}
		}
		sensor_ptr = sensor_ptr->next;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	617b      	str	r3, [r7, #20]
	while  (sensor_ptr != 0) {
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d194      	bne.n	8001ed2 <SMH_SensorDOPolling+0x16>
	}
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000174 	.word	0x20000174
 8001fb8:	20000180 	.word	0x20000180

08001fbc <SMH_SensorDOThresholds>:
 *
 * @param sensor
 * @param isToLow
 * @return
 */
uint8_t SMH_SensorDOThresholds(SMH_SensorDescrTypeDef* sensor, bool changeDirection) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]

	SMH_SensorThreshold_t *thCurrent = sensor->thList;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	60fb      	str	r3, [r7, #12]

	while ( thCurrent != NULL) {
 8001fce:	e027      	b.n	8002020 <SMH_SensorDOThresholds+0x64>
		if ((thCurrent->sensorId > BOARD) && (thCurrent->sensorId < VREF) && (thCurrent->isToLow == changeDirection)) {
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	791b      	ldrb	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d023      	beq.n	8002020 <SMH_SensorDOThresholds+0x64>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	791b      	ldrb	r3, [r3, #4]
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	d81f      	bhi.n	8002020 <SMH_SensorDOThresholds+0x64>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11a      	bne.n	8002020 <SMH_SensorDOThresholds+0x64>

			SMH_SensorDescrTypeDef*  toSensor = GetSensorByID(thCurrent->sensorId);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	791b      	ldrb	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe5a 	bl	8001ca8 <GetSensorByID>
 8001ff4:	60b8      	str	r0, [r7, #8]
			if ((toSensor != NULL) && ( ! toSensor->isInput)) {
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d011      	beq.n	8002020 <SMH_SensorDOThresholds+0x64>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	799b      	ldrb	r3, [r3, #6]
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <SMH_SensorDOThresholds+0x64>
				if ( toSensor->isAnalog ) {
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	795b      	ldrb	r3, [r3, #5]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <SMH_SensorDOThresholds+0x64>
					// TODO: DO Threshold for analog sensor.
				}
				else{
					SMH_SensorSwitch(toSensor,thCurrent->sensorValue);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	88db      	ldrh	r3, [r3, #6]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	4619      	mov	r1, r3
 800201a:	68b8      	ldr	r0, [r7, #8]
 800201c:	f000 f884 	bl	8002128 <SMH_SensorSwitch>
	while ( thCurrent != NULL) {
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1d4      	bne.n	8001fd0 <SMH_SensorDOThresholds+0x14>
				}
			}
		}
	}
	return IS_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <SMH_SensorGetValue>:
 * Get sensor value for analog or digital input
 *
 * @param sensor
 * @return
 */
SMH_SensValueReply_t* SMH_SensorGetValue(SMH_SensorDescrTypeDef* sensor) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

	cur_sens_val.value = 0;
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <SMH_SensorGetValue+0xf0>)
 800203a:	2200      	movs	r2, #0
 800203c:	801a      	strh	r2, [r3, #0]
	cur_sens_val.vref = 0;
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <SMH_SensorGetValue+0xf0>)
 8002040:	2200      	movs	r2, #0
 8002042:	805a      	strh	r2, [r3, #2]
	cur_sens_val.power_of_ten = 0;
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <SMH_SensorGetValue+0xf0>)
 8002046:	2200      	movs	r2, #0
 8002048:	711a      	strb	r2, [r3, #4]

	SMH_SensorDescrTypeDef* vref_sensor = GetSensorByID(VREF);
 800204a:	200a      	movs	r0, #10
 800204c:	f7ff fe2c 	bl	8001ca8 <GetSensorByID>
 8002050:	60f8      	str	r0, [r7, #12]

	if (sensor->isInput && (sensor->status = SENSOR_UP)) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d05d      	beq.n	8002116 <SMH_SensorGetValue+0xe6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	705a      	strb	r2, [r3, #1]
		if (( sensor->isAnalog ) && (sensor->adcChannel != ADC_CHANNEL_0 )) {
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	795b      	ldrb	r3, [r3, #5]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d028      	beq.n	80020ba <SMH_SensorGetValue+0x8a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d024      	beq.n	80020ba <SMH_SensorGetValue+0x8a>

			if (vref_sensor->adcRank > 0)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <SMH_SensorGetValue+0x64>
				cur_sens_val.vref = SMH_ConvResultArray[vref_sensor->adcRank-1];
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <SMH_SensorGetValue+0xf4>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002084:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002088:	3b01      	subs	r3, #1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <SMH_SensorGetValue+0xf0>)
 8002092:	805a      	strh	r2, [r3, #2]
			if (sensor->adcRank > 0)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d03b      	beq.n	8002116 <SMH_SensorGetValue+0xe6>
				cur_sens_val.value = SMH_ConvResultArray[sensor->adcRank-1];
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <SMH_SensorGetValue+0xf4>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80020ac:	3b01      	subs	r3, #1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	881a      	ldrh	r2, [r3, #0]
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <SMH_SensorGetValue+0xf0>)
 80020b6:	801a      	strh	r2, [r3, #0]
			if (sensor->adcRank > 0)
 80020b8:	e02d      	b.n	8002116 <SMH_SensorGetValue+0xe6>
				cur_sens_val.value = (uint16_t) TMPSENSOR_getTemperature(cur_sens_val.value,cur_sens_val.vref) * 100;
				cur_sens_val.power_of_ten = -2;
			}
#endif
		}
		else if(( ! sensor->isAnalog ) ) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	795b      	ldrb	r3, [r3, #5]
 80020be:	f083 0301 	eor.w	r3, r3, #1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <SMH_SensorGetValue+0xba>
			cur_sens_val.value = HAL_GPIO_ReadPin(GetPortNum(sensor->pinPort), sensor->pinNum);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7d1b      	ldrb	r3, [r3, #20]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fbbb 	bl	8001848 <GetPortNum>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8a5b      	ldrh	r3, [r3, #18]
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f002 fc2a 	bl	8004934 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <SMH_SensorGetValue+0xf0>)
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	e015      	b.n	8002116 <SMH_SensorGetValue+0xe6>
		}
		else if (sensor->adcChannel == ADC_CHANNEL_0) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <SMH_SensorGetValue+0xce>
			SMHome_SendError(NULL, NULL, RC_ADC_CH_UNUSED);
 80020f2:	226f      	movs	r2, #111	; 0x6f
 80020f4:	2100      	movs	r1, #0
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff f9e8 	bl	80014cc <SMHome_SendError>
 80020fc:	e00b      	b.n	8002116 <SMH_SensorGetValue+0xe6>
		}
		else if (sensor->status == SENSOR_DOWN) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <SMH_SensorGetValue+0xe6>
			SMHome_SendError(NULL, NULL, RC_ADC_CH_DOWN);
 800210c:	2270      	movs	r2, #112	; 0x70
 800210e:	2100      	movs	r1, #0
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff f9db 	bl	80014cc <SMHome_SendError>
		}
	}
	return &cur_sens_val;
 8002116:	4b02      	ldr	r3, [pc, #8]	; (8002120 <SMH_SensorGetValue+0xf0>)
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000178 	.word	0x20000178
 8002124:	20000180 	.word	0x20000180

08002128 <SMH_SensorSwitch>:
 * Switch sensor state 1/0  for digital output sensor
 *
 * @param sensor
 * @return
 */
uint8_t SMH_SensorSwitch(SMH_SensorDescrTypeDef* sensor, uint8_t value) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]

	if (! sensor->isInput ) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	799b      	ldrb	r3, [r3, #6]
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d020      	beq.n	8002184 <SMH_SensorSwitch+0x5c>
		if (! sensor->isAnalog) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	795b      	ldrb	r3, [r3, #5]
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d019      	beq.n	8002184 <SMH_SensorSwitch+0x5c>
			if ( value == 1 ) {
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10b      	bne.n	800216e <SMH_SensorSwitch+0x46>
				HAL_GPIO_WritePin(GetPortNum(sensor->pinPort), sensor->pinNum, GPIO_PIN_SET);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7d1b      	ldrb	r3, [r3, #20]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fb74 	bl	8001848 <GetPortNum>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8a5b      	ldrh	r3, [r3, #18]
 8002164:	2201      	movs	r2, #1
 8002166:	4619      	mov	r1, r3
 8002168:	f002 fbfb 	bl	8004962 <HAL_GPIO_WritePin>
 800216c:	e00a      	b.n	8002184 <SMH_SensorSwitch+0x5c>
			}
			else {
				HAL_GPIO_WritePin(GetPortNum(sensor->pinPort), sensor->pinNum, GPIO_PIN_RESET);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7d1b      	ldrb	r3, [r3, #20]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fb68 	bl	8001848 <GetPortNum>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8a5b      	ldrh	r3, [r3, #18]
 800217c:	2200      	movs	r2, #0
 800217e:	4619      	mov	r1, r3
 8002180:	f002 fbef 	bl	8004962 <HAL_GPIO_WritePin>
			}
		} else  {
			// Set analog value
		}
	}
	return IS_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_MspInit+0x5c>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_MspInit+0x5c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6193      	str	r3, [r2, #24]
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_MspInit+0x5c>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_MspInit+0x5c>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_MspInit+0x5c>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_MspInit+0x5c>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_MspInit+0x60>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_MspInit+0x60>)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000

080021f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <NMI_Handler+0x4>

080021fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <HardFault_Handler+0x4>

08002200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <MemManage_Handler+0x4>

08002206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <BusFault_Handler+0x4>

0800220c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <UsageFault_Handler+0x4>

08002212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223a:	f000 f959 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <DMA1_Channel1_IRQHandler+0x10>)
 800224a:	f002 f80f 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200000a8 	.word	0x200000a8

08002258 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800225e:	f001 fb58 	bl	8003912 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200000f0 	.word	0x200000f0

0800226c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <CAN1_SCE_IRQHandler+0x10>)
 8002272:	f001 fb4e 	bl	8003912 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200000f0 	.word	0x200000f0

08002280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM2_IRQHandler+0x10>)
 8002286:	f003 fad1 	bl	800582c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000018c 	.word	0x2000018c

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f003 fed2 	bl	800606c <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20002800 	.word	0x20002800
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000188 	.word	0x20000188
 80022fc:	20000320 	.word	0x20000320

08002300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002320:	463b      	mov	r3, r7
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <MX_TIM2_Init+0x98>)
 800232a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800232e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_TIM2_Init+0x98>)
 8002332:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_TIM2_Init+0x98>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <MX_TIM2_Init+0x98>)
 8002340:	f242 7210 	movw	r2, #10000	; 0x2710
 8002344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <MX_TIM2_Init+0x98>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_TIM2_Init+0x98>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <MX_TIM2_Init+0x98>)
 8002354:	f003 f9cf 	bl	80056f6 <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800235e:	f7fe fbed 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	4619      	mov	r1, r3
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_TIM2_Init+0x98>)
 8002370:	f003 fb64 	bl	8005a3c <HAL_TIM_ConfigClockSource>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800237a:	f7fe fbdf 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002386:	463b      	mov	r3, r7
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_TIM2_Init+0x98>)
 800238c:	f003 fd30 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002396:	f7fe fbd1 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000018c 	.word	0x2000018c

080023a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d113      	bne.n	80023e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_TIM_Base_MspInit+0x44>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <HAL_TIM_Base_MspInit+0x44>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	61d3      	str	r3, [r2, #28]
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_TIM_Base_MspInit+0x44>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2101      	movs	r1, #1
 80023d6:	201c      	movs	r0, #28
 80023d8:	f001 fdb1 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023dc:	201c      	movs	r0, #28
 80023de:	f001 fdca 	bl	8003f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */
//  Wake up 1 sec
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d102      	bne.n	8002408 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		doPolling = true;
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
	}

}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000139 	.word	0x20000139

08002418 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002418:	f7ff ff72 	bl	8002300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480b      	ldr	r0, [pc, #44]	; (800244c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800241e:	490c      	ldr	r1, [pc, #48]	; (8002450 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002420:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002434:	4c09      	ldr	r4, [pc, #36]	; (800245c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f003 fe19 	bl	8006078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002446:	f7fe fa07 	bl	8000858 <main>
  bx lr
 800244a:	4770      	bx	lr
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002454:	08006204 	.word	0x08006204
  ldr r2, =_sbss
 8002458:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800245c:	20000320 	.word	0x20000320

08002460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC1_2_IRQHandler>
	...

08002464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_Init+0x28>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_Init+0x28>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f001 fd57 	bl	8003f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	200f      	movs	r0, #15
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff fe86 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 fd7d 	bl	8003fae <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024cc:	f001 fd37 	bl	8003f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000008 	.word	0x20000008
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_IncTick+0x1c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x20>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a03      	ldr	r2, [pc, #12]	; (8002510 <HAL_IncTick+0x20>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000008 	.word	0x20000008
 8002510:	200001d4 	.word	0x200001d4

08002514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <HAL_GetTick+0x10>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	200001d4 	.word	0x200001d4

08002528 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_SuspendTick+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_SuspendTick+0x18>)
 8002532:	f023 0302 	bic.w	r3, r3, #2
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_ResumeTick+0x18>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a03      	ldr	r2, [pc, #12]	; (800255c <HAL_ResumeTick+0x18>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0be      	b.n	8002700 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fd fe2a 	bl	80001f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fc0d 	bl	8002dc4 <ADC_ConversionStop_Disable>
 80025aa:	4603      	mov	r3, r0
 80025ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 8099 	bne.w	80026ee <HAL_ADC_Init+0x18e>
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 8095 	bne.w	80026ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025cc:	f023 0302 	bic.w	r3, r3, #2
 80025d0:	f043 0202 	orr.w	r2, r3, #2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7b1b      	ldrb	r3, [r3, #12]
 80025e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f8:	d003      	beq.n	8002602 <HAL_ADC_Init+0xa2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_ADC_Init+0xa8>
 8002602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002606:	e000      	b.n	800260a <HAL_ADC_Init+0xaa>
 8002608:	2300      	movs	r3, #0
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7d1b      	ldrb	r3, [r3, #20]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d119      	bne.n	800264c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7b1b      	ldrb	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	3b01      	subs	r3, #1
 8002626:	035a      	lsls	r2, r3, #13
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e00b      	b.n	800264c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_ADC_Init+0x1a8>)
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	430b      	orrs	r3, r1
 8002672:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267c:	d003      	beq.n	8002686 <HAL_ADC_Init+0x126>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d104      	bne.n	8002690 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	3b01      	subs	r3, #1
 800268c:	051b      	lsls	r3, r3, #20
 800268e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_ADC_Init+0x1ac>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10b      	bne.n	80026cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ca:	e018      	b.n	80026fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	f023 0312 	bic.w	r3, r3, #18
 80026d4:	f043 0210 	orr.w	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ec:	e007      	b.n	80026fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	ffe1f7fd 	.word	0xffe1f7fd
 800270c:	ff1f0efe 	.word	0xff1f0efe

08002710 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0ad      	b.n	8002882 <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f043 0202 	orr.w	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fb46 	bl	8002dc4 <ADC_ConversionStop_Disable>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 809a 	bne.w	8002878 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 021f 	mvn.w	r2, #31
 800274c:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b4c      	ldr	r3, [pc, #304]	; (800288c <HAL_ADC_DeInit+0x17c>)
 800275a:	400b      	ands	r3, r1
 800275c:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_ADC_DeInit+0x180>)
 800276a:	400b      	ands	r3, r1
 800276c:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800277c:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800278c:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800279c:	f023 030f 	bic.w	r3, r3, #15
 80027a0:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027b0:	f023 030f 	bic.w	r3, r3, #15
 80027b4:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027c4:	f023 030f 	bic.w	r3, r3, #15
 80027c8:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027d8:	f023 030f 	bic.w	r3, r3, #15
 80027dc:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027ec:	f023 030f 	bic.w	r3, r3, #15
 80027f0:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002800:	f023 030f 	bic.w	r3, r3, #15
 8002804:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002844:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	0d9b      	lsrs	r3, r3, #22
 8002852:	059b      	lsls	r3, r3, #22
 8002854:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	0d9b      	lsrs	r3, r3, #22
 8002862:	059b      	lsls	r3, r3, #22
 8002864:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fd fd10 	bl	800028c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	ff3f0000 	.word	0xff3f0000
 8002890:	ff0106f0 	.word	0xff0106f0

08002894 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a64      	ldr	r2, [pc, #400]	; (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_Start_DMA+0x24>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a63      	ldr	r2, [pc, #396]	; (8002a40 <HAL_ADC_Start_DMA+0x1ac>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d106      	bne.n	80028c6 <HAL_ADC_Start_DMA+0x32>
 80028b8:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 80b3 	bne.w	8002a2c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_Start_DMA+0x40>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0ae      	b.n	8002a32 <HAL_ADC_Start_DMA+0x19e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa17 	bl	8002d10 <ADC_Enable>
 80028e2:	4603      	mov	r3, r0
 80028e4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 809a 	bne.w	8002a22 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_ADC_Start_DMA+0x1ac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d105      	bne.n	8002918 <HAL_ADC_Start_DMA+0x84>
 800290c:	4b4b      	ldr	r3, [pc, #300]	; (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d115      	bne.n	8002944 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292e:	2b00      	cmp	r3, #0
 8002930:	d026      	beq.n	8002980 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800293a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002942:	e01d      	b.n	8002980 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_ADC_Start_DMA+0xd0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <HAL_ADC_Start_DMA+0x1ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10d      	bne.n	8002980 <HAL_ADC_Start_DMA+0xec>
 8002964:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002978:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f023 0206 	bic.w	r2, r3, #6
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
 8002998:	e002      	b.n	80029a0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <HAL_ADC_Start_DMA+0x1b0>)
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4a24      	ldr	r2, [pc, #144]	; (8002a48 <HAL_ADC_Start_DMA+0x1b4>)
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <HAL_ADC_Start_DMA+0x1b8>)
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0202 	mvn.w	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a18      	ldr	r0, [r3, #32]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	334c      	adds	r3, #76	; 0x4c
 80029e4:	4619      	mov	r1, r3
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f001 fba3 	bl	8004134 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029fc:	d108      	bne.n	8002a10 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a0c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a0e:	e00f      	b.n	8002a30 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a1e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a20:	e006      	b.n	8002a30 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002a2a:	e001      	b.n	8002a30 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40012400 	.word	0x40012400
 8002a40:	40012800 	.word	0x40012800
 8002a44:	08002e47 	.word	0x08002e47
 8002a48:	08002ec3 	.word	0x08002ec3
 8002a4c:	08002edf 	.word	0x08002edf

08002a50 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Stop_DMA+0x1a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e03a      	b.n	8002ae0 <HAL_ADC_Stop_DMA+0x90>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9a6 	bl	8002dc4 <ADC_ConversionStop_Disable>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d129      	bne.n	8002ad6 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d11a      	bne.n	8002ad6 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 fba5 	bl	80041f4 <HAL_DMA_Abort>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac8:	e005      	b.n	8002ad6 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x20>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0dc      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x1da>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d81c      	bhi.n	8002b8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b05      	subs	r3, #5
 8002b62:	221f      	movs	r2, #31
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4019      	ands	r1, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b05      	subs	r3, #5
 8002b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34
 8002b88:	e03c      	b.n	8002c04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d81c      	bhi.n	8002bcc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b23      	subs	r3, #35	; 0x23
 8002ba4:	221f      	movs	r2, #31
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	4019      	ands	r1, r3
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b23      	subs	r3, #35	; 0x23
 8002bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bca:	e01b      	b.n	8002c04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b41      	subs	r3, #65	; 0x41
 8002bde:	221f      	movs	r2, #31
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	4019      	ands	r1, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b41      	subs	r3, #65	; 0x41
 8002bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d91c      	bls.n	8002c46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68d9      	ldr	r1, [r3, #12]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b1e      	subs	r3, #30
 8002c1e:	2207      	movs	r2, #7
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	4019      	ands	r1, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6898      	ldr	r0, [r3, #8]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	3b1e      	subs	r3, #30
 8002c38:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e019      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6919      	ldr	r1, [r3, #16]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	2207      	movs	r2, #7
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4019      	ands	r1, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6898      	ldr	r0, [r3, #8]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d003      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c86:	2b11      	cmp	r3, #17
 8002c88:	d132      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d125      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d126      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <HAL_ADC_ConfigChannel+0x1ec>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	0c9a      	lsrs	r2, r3, #18
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cd0:	e002      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f9      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x1b2>
 8002cde:	e007      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40012400 	.word	0x40012400
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	431bde83 	.word	0x431bde83

08002d10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d040      	beq.n	8002db0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <ADC_Enable+0xac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <ADC_Enable+0xb0>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9b      	lsrs	r3, r3, #18
 8002d4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d4c:	e002      	b.n	8002d54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f9      	bne.n	8002d4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d5a:	f7ff fbdb 	bl	8002514 <HAL_GetTick>
 8002d5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d60:	e01f      	b.n	8002da2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d62:	f7ff fbd7 	bl	8002514 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d918      	bls.n	8002da2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d011      	beq.n	8002da2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e007      	b.n	8002db2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d1d8      	bne.n	8002d62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d12e      	bne.n	8002e3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dee:	f7ff fb91 	bl	8002514 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002df4:	e01b      	b.n	8002e2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002df6:	f7ff fb8d 	bl	8002514 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d914      	bls.n	8002e2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10d      	bne.n	8002e2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d0dc      	beq.n	8002df6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d127      	bne.n	8002eb0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e7a:	d115      	bne.n	8002ea8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff fe1d 	bl	8002ae8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002eae:	e004      	b.n	8002eba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff fe12 	bl	8002afa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f043 0204 	orr.w	r2, r3, #4
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe01 	bl	8002b0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADCEx_Calibration_Start+0x1e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e097      	b.n	8003062 <HAL_ADCEx_Calibration_Start+0x14e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ff42 	bl	8002dc4 <ADC_ConversionStop_Disable>
 8002f40:	4603      	mov	r3, r0
 8002f42:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff fee3 	bl	8002d10 <ADC_Enable>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 8081 	bne.w	8003058 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f5e:	f023 0302 	bic.w	r3, r3, #2
 8002f62:	f043 0202 	orr.w	r2, r3, #2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f6a:	4b40      	ldr	r3, [pc, #256]	; (800306c <HAL_ADCEx_Calibration_Start+0x158>)
 8002f6c:	681c      	ldr	r4, [r3, #0]
 8002f6e:	2002      	movs	r0, #2
 8002f70:	f002 fa02 	bl	8005378 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f74:	4603      	mov	r3, r0
 8002f76:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002f7a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002f7c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002f7e:	e002      	b.n	8002f86 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0208 	orr.w	r2, r2, #8
 8002f9a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f9c:	f7ff faba 	bl	8002514 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fa2:	e01b      	b.n	8002fdc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002fa4:	f7ff fab6 	bl	8002514 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b0a      	cmp	r3, #10
 8002fb0:	d914      	bls.n	8002fdc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	f023 0312 	bic.w	r3, r3, #18
 8002fc8:	f043 0210 	orr.w	r2, r3, #16
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e042      	b.n	8003062 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1dc      	bne.n	8002fa4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0204 	orr.w	r2, r2, #4
 8002ff8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ffa:	f7ff fa8b 	bl	8002514 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003000:	e01b      	b.n	800303a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003002:	f7ff fa87 	bl	8002514 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b0a      	cmp	r3, #10
 800300e:	d914      	bls.n	800303a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f023 0312 	bic.w	r3, r3, #18
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e013      	b.n	8003062 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1dc      	bne.n	8003002 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f023 0303 	bic.w	r3, r3, #3
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	20000000 	.word	0x20000000

08003070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0ed      	b.n	800325e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd f94e 	bl	8000330 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a4:	f7ff fa36 	bl	8002514 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030aa:	e012      	b.n	80030d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030ac:	f7ff fa32 	bl	8002514 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b0a      	cmp	r3, #10
 80030b8:	d90b      	bls.n	80030d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2205      	movs	r2, #5
 80030ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e0c5      	b.n	800325e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0e5      	beq.n	80030ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0202 	bic.w	r2, r2, #2
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7ff fa10 	bl	8002514 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030f6:	e012      	b.n	800311e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f8:	f7ff fa0c 	bl	8002514 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d90b      	bls.n	800311e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2205      	movs	r2, #5
 8003116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e09f      	b.n	800325e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e5      	bne.n	80030f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7e1b      	ldrb	r3, [r3, #24]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d108      	bne.n	8003146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e007      	b.n	8003156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7e5b      	ldrb	r3, [r3, #25]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e007      	b.n	8003180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e9b      	ldrb	r3, [r3, #26]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d108      	bne.n	800319a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0220 	orr.w	r2, r2, #32
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e007      	b.n	80031aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0220 	bic.w	r2, r2, #32
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7edb      	ldrb	r3, [r3, #27]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0210 	bic.w	r2, r2, #16
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0210 	orr.w	r2, r2, #16
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7f1b      	ldrb	r3, [r3, #28]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d108      	bne.n	80031ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0208 	orr.w	r2, r2, #8
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e007      	b.n	80031fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0208 	bic.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7f5b      	ldrb	r3, [r3, #29]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d108      	bne.n	8003218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0204 	orr.w	r2, r2, #4
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e007      	b.n	8003228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0204 	bic.w	r2, r2, #4
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	ea42 0103 	orr.w	r1, r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d003      	beq.n	800328c <HAL_CAN_ConfigFilter+0x26>
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	2b02      	cmp	r3, #2
 8003288:	f040 80aa 	bne.w	80033e0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2201      	movs	r2, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d123      	bne.n	800330e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	401a      	ands	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3248      	adds	r2, #72	; 0x48
 80032ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003302:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003304:	6979      	ldr	r1, [r7, #20]
 8003306:	3348      	adds	r3, #72	; 0x48
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d122      	bne.n	800335c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	431a      	orrs	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003336:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3248      	adds	r2, #72	; 0x48
 800333c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003350:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003352:	6979      	ldr	r1, [r7, #20]
 8003354:	3348      	adds	r3, #72	; 0x48
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003376:	e007      	b.n	8003388 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	431a      	orrs	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033a2:	e007      	b.n	80033b4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d107      	bne.n	80033cc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e006      	b.n	80033ee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d12e      	bne.n	800346a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003424:	f7ff f876 	bl	8002514 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800342a:	e012      	b.n	8003452 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800342c:	f7ff f872 	bl	8002514 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b0a      	cmp	r3, #10
 8003438:	d90b      	bls.n	8003452 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2205      	movs	r2, #5
 800344a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e012      	b.n	8003478 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e5      	bne.n	800342c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e006      	b.n	8003478 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003494:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d003      	beq.n	80034ac <HAL_CAN_AddTxMessage+0x2c>
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	f040 80ad 	bne.w	8003606 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8095 	beq.w	80035f6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	0e1b      	lsrs	r3, r3, #24
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80034d6:	2201      	movs	r2, #1
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	6809      	ldr	r1, [r1, #0]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3318      	adds	r3, #24
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	440b      	add	r3, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e00f      	b.n	8003524 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800350e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003518:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	3318      	adds	r3, #24
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	440b      	add	r3, r1
 8003522:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3318      	adds	r3, #24
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	440b      	add	r3, r1
 8003534:	3304      	adds	r3, #4
 8003536:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	7d1b      	ldrb	r3, [r3, #20]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d111      	bne.n	8003564 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3318      	adds	r3, #24
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	6811      	ldr	r1, [r2, #0]
 8003554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3318      	adds	r3, #24
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	440b      	add	r3, r1
 8003560:	3304      	adds	r3, #4
 8003562:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3307      	adds	r3, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	061a      	lsls	r2, r3, #24
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3306      	adds	r3, #6
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	041b      	lsls	r3, r3, #16
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3305      	adds	r3, #5
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	4313      	orrs	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	3204      	adds	r2, #4
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	4610      	mov	r0, r2
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6811      	ldr	r1, [r2, #0]
 800358c:	ea43 0200 	orr.w	r2, r3, r0
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	440b      	add	r3, r1
 8003596:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800359a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3303      	adds	r3, #3
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	061a      	lsls	r2, r3, #24
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3302      	adds	r3, #2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3301      	adds	r3, #1
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	4313      	orrs	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	4610      	mov	r0, r2
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	ea43 0200 	orr.w	r2, r3, r0
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	440b      	add	r3, r1
 80035cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80035d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3318      	adds	r3, #24
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	6811      	ldr	r1, [r2, #0]
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3318      	adds	r3, #24
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	440b      	add	r3, r1
 80035f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e00e      	b.n	8003614 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e006      	b.n	8003614 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3724      	adds	r7, #36	; 0x24
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003630:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d002      	beq.n	800363e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d11d      	bne.n	800367a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3301      	adds	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3301      	adds	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d003      	beq.n	80036aa <HAL_CAN_GetRxMessage+0x24>
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	f040 8103 	bne.w	80038b0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10e      	bne.n	80036ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0f7      	b.n	80038be <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0e8      	b.n	80038be <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	331b      	adds	r3, #27
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4413      	add	r3, r2
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0204 	and.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	331b      	adds	r3, #27
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	4413      	add	r3, r2
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0d5b      	lsrs	r3, r3, #21
 800371a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00b      	b.n	800373c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	331b      	adds	r3, #27
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	08db      	lsrs	r3, r3, #3
 8003734:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	331b      	adds	r3, #27
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	4413      	add	r3, r2
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0202 	and.w	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	331b      	adds	r3, #27
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2208      	movs	r2, #8
 800376e:	611a      	str	r2, [r3, #16]
 8003770:	e00b      	b.n	800378a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	331b      	adds	r3, #27
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 020f 	and.w	r2, r3, #15
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	331b      	adds	r3, #27
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4413      	add	r3, r2
 8003796:	3304      	adds	r3, #4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	b2da      	uxtb	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	331b      	adds	r3, #27
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	4413      	add	r3, r2
 80037ae:	3304      	adds	r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4413      	add	r3, r2
 80037da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0a1a      	lsrs	r2, r3, #8
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	0c1a      	lsrs	r2, r3, #16
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	3302      	adds	r3, #2
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	4413      	add	r3, r2
 800380e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0e1a      	lsrs	r2, r3, #24
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	3303      	adds	r3, #3
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	3304      	adds	r3, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	4413      	add	r3, r2
 8003840:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0a1a      	lsrs	r2, r3, #8
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	3305      	adds	r3, #5
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	4413      	add	r3, r2
 800385a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0c1a      	lsrs	r2, r3, #16
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	3306      	adds	r3, #6
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	4413      	add	r3, r2
 8003874:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0e1a      	lsrs	r2, r3, #24
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	3307      	adds	r3, #7
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0220 	orr.w	r2, r2, #32
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	e007      	b.n	80038ac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0220 	orr.w	r2, r2, #32
 80038aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e006      	b.n	80038be <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d002      	beq.n	80038e6 <HAL_CAN_ActivateNotification+0x1e>
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d109      	bne.n	80038fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6959      	ldr	r1, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e006      	b.n	8003908 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	; 0x28
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d07c      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d023      	beq.n	80039aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f983 	bl	8003c80 <HAL_CAN_TxMailbox0CompleteCallback>
 800397a:	e016      	b.n	80039aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
 800398e:	e00c      	b.n	80039aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	e002      	b.n	80039aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f986 	bl	8003cb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d024      	beq.n	80039fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f962 	bl	8003c92 <HAL_CAN_TxMailbox1CompleteCallback>
 80039ce:	e016      	b.n	80039fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	e00c      	b.n	80039fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	e002      	b.n	80039fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f965 	bl	8003cc8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d024      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f941 	bl	8003ca4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a22:	e016      	b.n	8003a52 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	e00c      	b.n	8003a52 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d004      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e002      	b.n	8003a52 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f944 	bl	8003cda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00c      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2210      	movs	r2, #16
 8003a74:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2208      	movs	r2, #8
 8003a90:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f92a 	bl	8003cec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fc fd09 	bl	80004c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2210      	movs	r2, #16
 8003ad8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2208      	movs	r2, #8
 8003af4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f90a 	bl	8003d10 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8f2 	bl	8003cfe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2210      	movs	r2, #16
 8003b34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8f3 	bl	8003d22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d006      	beq.n	8003b5e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2208      	movs	r2, #8
 8003b56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f8eb 	bl	8003d34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d07b      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d072      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d043      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03e      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003be0:	2b60      	cmp	r3, #96	; 0x60
 8003be2:	d02b      	beq.n	8003c3c <HAL_CAN_IRQHandler+0x32a>
 8003be4:	2b60      	cmp	r3, #96	; 0x60
 8003be6:	d82e      	bhi.n	8003c46 <HAL_CAN_IRQHandler+0x334>
 8003be8:	2b50      	cmp	r3, #80	; 0x50
 8003bea:	d022      	beq.n	8003c32 <HAL_CAN_IRQHandler+0x320>
 8003bec:	2b50      	cmp	r3, #80	; 0x50
 8003bee:	d82a      	bhi.n	8003c46 <HAL_CAN_IRQHandler+0x334>
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d019      	beq.n	8003c28 <HAL_CAN_IRQHandler+0x316>
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d826      	bhi.n	8003c46 <HAL_CAN_IRQHandler+0x334>
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d010      	beq.n	8003c1e <HAL_CAN_IRQHandler+0x30c>
 8003bfc:	2b30      	cmp	r3, #48	; 0x30
 8003bfe:	d822      	bhi.n	8003c46 <HAL_CAN_IRQHandler+0x334>
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d002      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x2f8>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d005      	beq.n	8003c14 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c08:	e01d      	b.n	8003c46 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	f043 0308 	orr.w	r3, r3, #8
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c12:	e019      	b.n	8003c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	f043 0310 	orr.w	r3, r3, #16
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c1c:	e014      	b.n	8003c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c26:	e00f      	b.n	8003c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c30:	e00a      	b.n	8003c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c3a:	e005      	b.n	8003c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c44:	e000      	b.n	8003c48 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c46:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c56:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fc fc1f 	bl	80004b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
	...

08003d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	60d3      	str	r3, [r2, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <__NVIC_GetPriorityGrouping+0x18>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 0307 	and.w	r3, r3, #7
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db0b      	blt.n	8003dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	4906      	ldr	r1, [pc, #24]	; (8003de0 <__NVIC_EnableIRQ+0x34>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2001      	movs	r0, #1
 8003dce:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100

08003de4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db12      	blt.n	8003e1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	490a      	ldr	r1, [pc, #40]	; (8003e28 <__NVIC_DisableIRQ+0x44>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2001      	movs	r0, #1
 8003e06:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0a:	3320      	adds	r3, #32
 8003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e10:	f3bf 8f4f 	dsb	sy
}
 8003e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e16:	f3bf 8f6f 	isb	sy
}
 8003e1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	6039      	str	r1, [r7, #0]
 8003e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db0a      	blt.n	8003e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <__NVIC_SetPriority+0x4c>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	0112      	lsls	r2, r2, #4
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e54:	e00a      	b.n	8003e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4908      	ldr	r1, [pc, #32]	; (8003e7c <__NVIC_SetPriority+0x50>)
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	3b04      	subs	r3, #4
 8003e64:	0112      	lsls	r2, r2, #4
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	440b      	add	r3, r1
 8003e6a:	761a      	strb	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e100 	.word	0xe000e100
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f1c3 0307 	rsb	r3, r3, #7
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf28      	it	cs
 8003e9e:	2304      	movcs	r3, #4
 8003ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d902      	bls.n	8003eb0 <NVIC_EncodePriority+0x30>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3b03      	subs	r3, #3
 8003eae:	e000      	b.n	8003eb2 <NVIC_EncodePriority+0x32>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	4313      	orrs	r3, r2
         );
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef4:	d301      	bcc.n	8003efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00f      	b.n	8003f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <SysTick_Config+0x40>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f02:	210f      	movs	r1, #15
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f08:	f7ff ff90 	bl	8003e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <SysTick_Config+0x40>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <SysTick_Config+0x40>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	e000e010 	.word	0xe000e010

08003f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff09 	bl	8003d48 <__NVIC_SetPriorityGrouping>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4603      	mov	r3, r0
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f50:	f7ff ff1e 	bl	8003d90 <__NVIC_GetPriorityGrouping>
 8003f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff ff90 	bl	8003e80 <NVIC_EncodePriority>
 8003f60:	4602      	mov	r2, r0
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff5f 	bl	8003e2c <__NVIC_SetPriority>
}
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff11 	bl	8003dac <__NVIC_EnableIRQ>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff1f 	bl	8003de4 <__NVIC_DisableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ff94 	bl	8003ee4 <SysTick_Config>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e043      	b.n	8004066 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <HAL_DMA_Init+0xa8>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a22      	ldr	r2, [pc, #136]	; (8004074 <HAL_DMA_Init+0xac>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	009a      	lsls	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <HAL_DMA_Init+0xb0>)
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004016:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	bffdfff8 	.word	0xbffdfff8
 8004074:	cccccccd 	.word	0xcccccccd
 8004078:	40020000 	.word	0x40020000

0800407c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e046      	b.n	800411c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_DMA_DeInit+0xac>)
 80040c6:	4413      	add	r3, r2
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_DMA_DeInit+0xb0>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	009a      	lsls	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <HAL_DMA_DeInit+0xb4>)
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ea:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	bffdfff8 	.word	0xbffdfff8
 800412c:	cccccccd 	.word	0xcccccccd
 8004130:	40020000 	.word	0x40020000

08004134 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_DMA_Start_IT+0x20>
 8004150:	2302      	movs	r3, #2
 8004152:	e04b      	b.n	80041ec <HAL_DMA_Start_IT+0xb8>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d13a      	bne.n	80041de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f973 	bl	8004478 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 020e 	orr.w	r2, r2, #14
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e00f      	b.n	80041cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 020a 	orr.w	r2, r2, #10
 80041ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e005      	b.n	80041ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
 80041e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d008      	beq.n	800421e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2204      	movs	r2, #4
 8004210:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e020      	b.n	8004260 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 020e 	bic.w	r2, r2, #14
 800422c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f202 	lsl.w	r2, r1, r2
 800424c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
	...

0800426c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2204      	movs	r2, #4
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d04f      	beq.n	8004334 <HAL_DMA_IRQHandler+0xc8>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04a      	beq.n	8004334 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0204 	bic.w	r2, r2, #4
 80042ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a66      	ldr	r2, [pc, #408]	; (800445c <HAL_DMA_IRQHandler+0x1f0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d029      	beq.n	800431a <HAL_DMA_IRQHandler+0xae>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a65      	ldr	r2, [pc, #404]	; (8004460 <HAL_DMA_IRQHandler+0x1f4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d022      	beq.n	8004316 <HAL_DMA_IRQHandler+0xaa>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a63      	ldr	r2, [pc, #396]	; (8004464 <HAL_DMA_IRQHandler+0x1f8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01a      	beq.n	8004310 <HAL_DMA_IRQHandler+0xa4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a62      	ldr	r2, [pc, #392]	; (8004468 <HAL_DMA_IRQHandler+0x1fc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d012      	beq.n	800430a <HAL_DMA_IRQHandler+0x9e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a60      	ldr	r2, [pc, #384]	; (800446c <HAL_DMA_IRQHandler+0x200>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00a      	beq.n	8004304 <HAL_DMA_IRQHandler+0x98>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5f      	ldr	r2, [pc, #380]	; (8004470 <HAL_DMA_IRQHandler+0x204>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d102      	bne.n	80042fe <HAL_DMA_IRQHandler+0x92>
 80042f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042fc:	e00e      	b.n	800431c <HAL_DMA_IRQHandler+0xb0>
 80042fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004302:	e00b      	b.n	800431c <HAL_DMA_IRQHandler+0xb0>
 8004304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004308:	e008      	b.n	800431c <HAL_DMA_IRQHandler+0xb0>
 800430a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800430e:	e005      	b.n	800431c <HAL_DMA_IRQHandler+0xb0>
 8004310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004314:	e002      	b.n	800431c <HAL_DMA_IRQHandler+0xb0>
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	e000      	b.n	800431c <HAL_DMA_IRQHandler+0xb0>
 800431a:	2304      	movs	r3, #4
 800431c:	4a55      	ldr	r2, [pc, #340]	; (8004474 <HAL_DMA_IRQHandler+0x208>)
 800431e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8094 	beq.w	8004452 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004332:	e08e      	b.n	8004452 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2202      	movs	r2, #2
 800433a:	409a      	lsls	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d056      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x186>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d051      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 020a 	bic.w	r2, r2, #10
 800436a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a38      	ldr	r2, [pc, #224]	; (800445c <HAL_DMA_IRQHandler+0x1f0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d029      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x166>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a37      	ldr	r2, [pc, #220]	; (8004460 <HAL_DMA_IRQHandler+0x1f4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_DMA_IRQHandler+0x162>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a35      	ldr	r2, [pc, #212]	; (8004464 <HAL_DMA_IRQHandler+0x1f8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01a      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x15c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a34      	ldr	r2, [pc, #208]	; (8004468 <HAL_DMA_IRQHandler+0x1fc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d012      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x156>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a32      	ldr	r2, [pc, #200]	; (800446c <HAL_DMA_IRQHandler+0x200>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00a      	beq.n	80043bc <HAL_DMA_IRQHandler+0x150>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a31      	ldr	r2, [pc, #196]	; (8004470 <HAL_DMA_IRQHandler+0x204>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d102      	bne.n	80043b6 <HAL_DMA_IRQHandler+0x14a>
 80043b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043b4:	e00e      	b.n	80043d4 <HAL_DMA_IRQHandler+0x168>
 80043b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ba:	e00b      	b.n	80043d4 <HAL_DMA_IRQHandler+0x168>
 80043bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c0:	e008      	b.n	80043d4 <HAL_DMA_IRQHandler+0x168>
 80043c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043c6:	e005      	b.n	80043d4 <HAL_DMA_IRQHandler+0x168>
 80043c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043cc:	e002      	b.n	80043d4 <HAL_DMA_IRQHandler+0x168>
 80043ce:	2320      	movs	r3, #32
 80043d0:	e000      	b.n	80043d4 <HAL_DMA_IRQHandler+0x168>
 80043d2:	2302      	movs	r3, #2
 80043d4:	4a27      	ldr	r2, [pc, #156]	; (8004474 <HAL_DMA_IRQHandler+0x208>)
 80043d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d034      	beq.n	8004452 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043f0:	e02f      	b.n	8004452 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2208      	movs	r2, #8
 80043f8:	409a      	lsls	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d028      	beq.n	8004454 <HAL_DMA_IRQHandler+0x1e8>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d023      	beq.n	8004454 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 020e 	bic.w	r2, r2, #14
 800441a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f202 	lsl.w	r2, r1, r2
 800442a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
    }
  }
  return;
 8004452:	bf00      	nop
 8004454:	bf00      	nop
}
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40020008 	.word	0x40020008
 8004460:	4002001c 	.word	0x4002001c
 8004464:	40020030 	.word	0x40020030
 8004468:	40020044 	.word	0x40020044
 800446c:	40020058 	.word	0x40020058
 8004470:	4002006c 	.word	0x4002006c
 8004474:	40020000 	.word	0x40020000

08004478 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	2101      	movs	r1, #1
 8004490:	fa01 f202 	lsl.w	r2, r1, r2
 8004494:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d108      	bne.n	80044b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044b6:	e007      	b.n	80044c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
	...

080044d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b08b      	sub	sp, #44	; 0x2c
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044e2:	2300      	movs	r3, #0
 80044e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044e6:	e161      	b.n	80047ac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044e8:	2201      	movs	r2, #1
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	429a      	cmp	r2, r3
 8004502:	f040 8150 	bne.w	80047a6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4a97      	ldr	r2, [pc, #604]	; (8004768 <HAL_GPIO_Init+0x294>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d05e      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004510:	4a95      	ldr	r2, [pc, #596]	; (8004768 <HAL_GPIO_Init+0x294>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d875      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 8004516:	4a95      	ldr	r2, [pc, #596]	; (800476c <HAL_GPIO_Init+0x298>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d058      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 800451c:	4a93      	ldr	r2, [pc, #588]	; (800476c <HAL_GPIO_Init+0x298>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d86f      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 8004522:	4a93      	ldr	r2, [pc, #588]	; (8004770 <HAL_GPIO_Init+0x29c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d052      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004528:	4a91      	ldr	r2, [pc, #580]	; (8004770 <HAL_GPIO_Init+0x29c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d869      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 800452e:	4a91      	ldr	r2, [pc, #580]	; (8004774 <HAL_GPIO_Init+0x2a0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d04c      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004534:	4a8f      	ldr	r2, [pc, #572]	; (8004774 <HAL_GPIO_Init+0x2a0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d863      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 800453a:	4a8f      	ldr	r2, [pc, #572]	; (8004778 <HAL_GPIO_Init+0x2a4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d046      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004540:	4a8d      	ldr	r2, [pc, #564]	; (8004778 <HAL_GPIO_Init+0x2a4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d85d      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 8004546:	2b12      	cmp	r3, #18
 8004548:	d82a      	bhi.n	80045a0 <HAL_GPIO_Init+0xcc>
 800454a:	2b12      	cmp	r3, #18
 800454c:	d859      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <HAL_GPIO_Init+0x80>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	080045cf 	.word	0x080045cf
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080045bb 	.word	0x080045bb
 8004560:	080045fd 	.word	0x080045fd
 8004564:	08004603 	.word	0x08004603
 8004568:	08004603 	.word	0x08004603
 800456c:	08004603 	.word	0x08004603
 8004570:	08004603 	.word	0x08004603
 8004574:	08004603 	.word	0x08004603
 8004578:	08004603 	.word	0x08004603
 800457c:	08004603 	.word	0x08004603
 8004580:	08004603 	.word	0x08004603
 8004584:	08004603 	.word	0x08004603
 8004588:	08004603 	.word	0x08004603
 800458c:	08004603 	.word	0x08004603
 8004590:	08004603 	.word	0x08004603
 8004594:	08004603 	.word	0x08004603
 8004598:	080045b1 	.word	0x080045b1
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	4a76      	ldr	r2, [pc, #472]	; (800477c <HAL_GPIO_Init+0x2a8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045a6:	e02c      	b.n	8004602 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	623b      	str	r3, [r7, #32]
          break;
 80045ae:	e029      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	3304      	adds	r3, #4
 80045b6:	623b      	str	r3, [r7, #32]
          break;
 80045b8:	e024      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	3308      	adds	r3, #8
 80045c0:	623b      	str	r3, [r7, #32]
          break;
 80045c2:	e01f      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	330c      	adds	r3, #12
 80045ca:	623b      	str	r3, [r7, #32]
          break;
 80045cc:	e01a      	b.n	8004604 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045d6:	2304      	movs	r3, #4
 80045d8:	623b      	str	r3, [r7, #32]
          break;
 80045da:	e013      	b.n	8004604 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045e4:	2308      	movs	r3, #8
 80045e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	611a      	str	r2, [r3, #16]
          break;
 80045ee:	e009      	b.n	8004604 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045f0:	2308      	movs	r3, #8
 80045f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	615a      	str	r2, [r3, #20]
          break;
 80045fa:	e003      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
          break;
 8004600:	e000      	b.n	8004604 <HAL_GPIO_Init+0x130>
          break;
 8004602:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2bff      	cmp	r3, #255	; 0xff
 8004608:	d801      	bhi.n	800460e <HAL_GPIO_Init+0x13a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	e001      	b.n	8004612 <HAL_GPIO_Init+0x13e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2bff      	cmp	r3, #255	; 0xff
 8004618:	d802      	bhi.n	8004620 <HAL_GPIO_Init+0x14c>
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	e002      	b.n	8004626 <HAL_GPIO_Init+0x152>
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	3b08      	subs	r3, #8
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	210f      	movs	r1, #15
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	6a39      	ldr	r1, [r7, #32]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a9 	beq.w	80047a6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004654:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_GPIO_Init+0x2ac>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	4a49      	ldr	r2, [pc, #292]	; (8004780 <HAL_GPIO_Init+0x2ac>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6193      	str	r3, [r2, #24]
 8004660:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_GPIO_Init+0x2ac>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800466c:	4a45      	ldr	r2, [pc, #276]	; (8004784 <HAL_GPIO_Init+0x2b0>)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3d      	ldr	r2, [pc, #244]	; (8004788 <HAL_GPIO_Init+0x2b4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00d      	beq.n	80046b4 <HAL_GPIO_Init+0x1e0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3c      	ldr	r2, [pc, #240]	; (800478c <HAL_GPIO_Init+0x2b8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <HAL_GPIO_Init+0x1dc>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3b      	ldr	r2, [pc, #236]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_GPIO_Init+0x1d8>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e004      	b.n	80046b6 <HAL_GPIO_Init+0x1e2>
 80046ac:	2303      	movs	r3, #3
 80046ae:	e002      	b.n	80046b6 <HAL_GPIO_Init+0x1e2>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_GPIO_Init+0x1e2>
 80046b4:	2300      	movs	r3, #0
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	f002 0203 	and.w	r2, r2, #3
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	4093      	lsls	r3, r2
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046c6:	492f      	ldr	r1, [pc, #188]	; (8004784 <HAL_GPIO_Init+0x2b0>)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	3302      	adds	r3, #2
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046e0:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	492b      	ldr	r1, [pc, #172]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]
 80046ec:	e006      	b.n	80046fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046ee:	4b29      	ldr	r3, [pc, #164]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	4927      	ldr	r1, [pc, #156]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004708:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	4921      	ldr	r1, [pc, #132]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	60cb      	str	r3, [r1, #12]
 8004714:	e006      	b.n	8004724 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004716:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	43db      	mvns	r3, r3
 800471e:	491d      	ldr	r1, [pc, #116]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 8004720:	4013      	ands	r3, r2
 8004722:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004730:	4b18      	ldr	r3, [pc, #96]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4917      	ldr	r1, [pc, #92]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	e006      	b.n	800474c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800473e:	4b15      	ldr	r3, [pc, #84]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	43db      	mvns	r3, r3
 8004746:	4913      	ldr	r1, [pc, #76]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 8004748:	4013      	ands	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01f      	beq.n	8004798 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	490d      	ldr	r1, [pc, #52]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
 8004764:	e01f      	b.n	80047a6 <HAL_GPIO_Init+0x2d2>
 8004766:	bf00      	nop
 8004768:	10320000 	.word	0x10320000
 800476c:	10310000 	.word	0x10310000
 8004770:	10220000 	.word	0x10220000
 8004774:	10210000 	.word	0x10210000
 8004778:	10120000 	.word	0x10120000
 800477c:	10110000 	.word	0x10110000
 8004780:	40021000 	.word	0x40021000
 8004784:	40010000 	.word	0x40010000
 8004788:	40010800 	.word	0x40010800
 800478c:	40010c00 	.word	0x40010c00
 8004790:	40011000 	.word	0x40011000
 8004794:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_GPIO_Init+0x2f4>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	43db      	mvns	r3, r3
 80047a0:	4909      	ldr	r1, [pc, #36]	; (80047c8 <HAL_GPIO_Init+0x2f4>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	3301      	adds	r3, #1
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	fa22 f303 	lsr.w	r3, r2, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f47f ae96 	bne.w	80044e8 <HAL_GPIO_Init+0x14>
  }
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	372c      	adds	r7, #44	; 0x2c
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40010400 	.word	0x40010400

080047cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	; 0x24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80047da:	e094      	b.n	8004906 <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80047dc:	2201      	movs	r2, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8087 	beq.w	8004900 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80047f2:	4a4b      	ldr	r2, [pc, #300]	; (8004920 <HAL_GPIO_DeInit+0x154>)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	3302      	adds	r3, #2
 80047fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fe:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	220f      	movs	r2, #15
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a43      	ldr	r2, [pc, #268]	; (8004924 <HAL_GPIO_DeInit+0x158>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00d      	beq.n	8004838 <HAL_GPIO_DeInit+0x6c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a42      	ldr	r2, [pc, #264]	; (8004928 <HAL_GPIO_DeInit+0x15c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <HAL_GPIO_DeInit+0x68>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a41      	ldr	r2, [pc, #260]	; (800492c <HAL_GPIO_DeInit+0x160>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_GPIO_DeInit+0x64>
 800482c:	2302      	movs	r3, #2
 800482e:	e004      	b.n	800483a <HAL_GPIO_DeInit+0x6e>
 8004830:	2303      	movs	r3, #3
 8004832:	e002      	b.n	800483a <HAL_GPIO_DeInit+0x6e>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_GPIO_DeInit+0x6e>
 8004838:	2300      	movs	r3, #0
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	f002 0203 	and.w	r2, r2, #3
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	4093      	lsls	r3, r2
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	429a      	cmp	r2, r3
 8004848:	d132      	bne.n	80048b0 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800484a:	4b39      	ldr	r3, [pc, #228]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	43db      	mvns	r3, r3
 8004852:	4937      	ldr	r1, [pc, #220]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 8004854:	4013      	ands	r3, r2
 8004856:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004858:	4b35      	ldr	r3, [pc, #212]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	43db      	mvns	r3, r3
 8004860:	4933      	ldr	r1, [pc, #204]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 8004862:	4013      	ands	r3, r2
 8004864:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004866:	4b32      	ldr	r3, [pc, #200]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	43db      	mvns	r3, r3
 800486e:	4930      	ldr	r1, [pc, #192]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 8004870:	4013      	ands	r3, r2
 8004872:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004874:	4b2e      	ldr	r3, [pc, #184]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	43db      	mvns	r3, r3
 800487c:	492c      	ldr	r1, [pc, #176]	; (8004930 <HAL_GPIO_DeInit+0x164>)
 800487e:	4013      	ands	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	220f      	movs	r2, #15
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004892:	4a23      	ldr	r2, [pc, #140]	; (8004920 <HAL_GPIO_DeInit+0x154>)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	3302      	adds	r3, #2
 800489a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	481f      	ldr	r0, [pc, #124]	; (8004920 <HAL_GPIO_DeInit+0x154>)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	400a      	ands	r2, r1
 80048aa:	3302      	adds	r3, #2
 80048ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2bff      	cmp	r3, #255	; 0xff
 80048b4:	d801      	bhi.n	80048ba <HAL_GPIO_DeInit+0xee>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	e001      	b.n	80048be <HAL_GPIO_DeInit+0xf2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3304      	adds	r3, #4
 80048be:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2bff      	cmp	r3, #255	; 0xff
 80048c4:	d802      	bhi.n	80048cc <HAL_GPIO_DeInit+0x100>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	e002      	b.n	80048d2 <HAL_GPIO_DeInit+0x106>
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	3b08      	subs	r3, #8
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	210f      	movs	r1, #15
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	401a      	ands	r2, r3
 80048e4:	2104      	movs	r1, #4
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	431a      	orrs	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	401a      	ands	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	f47f af64 	bne.w	80047dc <HAL_GPIO_DeInit+0x10>
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40010000 	.word	0x40010000
 8004924:	40010800 	.word	0x40010800
 8004928:	40010c00 	.word	0x40010c00
 800492c:	40011000 	.word	0x40011000
 8004930:	40010400 	.word	0x40010400

08004934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
 8004950:	e001      	b.n	8004956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004956:	7bfb      	ldrb	r3, [r7, #15]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	807b      	strh	r3, [r7, #2]
 800496e:	4613      	mov	r3, r2
 8004970:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004972:	787b      	ldrb	r3, [r7, #1]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004978:	887a      	ldrh	r2, [r7, #2]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800497e:	e003      	b.n	8004988 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	041a      	lsls	r2, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	611a      	str	r2, [r3, #16]
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
	...

08004994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d006      	beq.n	80049b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049aa:	4a05      	ldr	r2, [pc, #20]	; (80049c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc feeb 	bl	800178e <HAL_GPIO_EXTI_Callback>
  }
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40010400 	.word	0x40010400

080049c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	420e0020 	.word	0x420e0020

080049dc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_PWR_EnterSLEEPMode+0x34>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <HAL_PWR_EnterSLEEPMode+0x34>)
 80049ee:	f023 0304 	bic.w	r3, r3, #4
 80049f2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80049fa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80049fc:	e002      	b.n	8004a04 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80049fe:	bf40      	sev
    __WFE();
 8004a00:	bf20      	wfe
    __WFE();
 8004a02:	bf20      	wfe
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e272      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8087 	beq.w	8004b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a34:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d00c      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a40:	4b8f      	ldr	r3, [pc, #572]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d112      	bne.n	8004a72 <HAL_RCC_OscConfig+0x5e>
 8004a4c:	4b8c      	ldr	r3, [pc, #560]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d10b      	bne.n	8004a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5a:	4b89      	ldr	r3, [pc, #548]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d06c      	beq.n	8004b40 <HAL_RCC_OscConfig+0x12c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d168      	bne.n	8004b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e24c      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCC_OscConfig+0x76>
 8004a7c:	4b80      	ldr	r3, [pc, #512]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a7f      	ldr	r2, [pc, #508]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e02e      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd4>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x98>
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7a      	ldr	r2, [pc, #488]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b78      	ldr	r3, [pc, #480]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a77      	ldr	r2, [pc, #476]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e01d      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xbc>
 8004ab6:	4b72      	ldr	r3, [pc, #456]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a71      	ldr	r2, [pc, #452]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6e      	ldr	r2, [pc, #440]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd4>
 8004ad0:	4b6b      	ldr	r3, [pc, #428]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6a      	ldr	r2, [pc, #424]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b68      	ldr	r3, [pc, #416]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a67      	ldr	r2, [pc, #412]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fd fd10 	bl	8002514 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fd fd0c 	bl	8002514 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e200      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0xe4>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fd fcfc 	bl	8002514 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fd fcf8 	bl	8002514 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e1ec      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x10c>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d063      	beq.n	8004c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4e:	4b4c      	ldr	r3, [pc, #304]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b5a:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d11c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x18c>
 8004b66:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d116      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_RCC_OscConfig+0x176>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e1c0      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4939      	ldr	r1, [pc, #228]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9e:	e03a      	b.n	8004c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba8:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_RCC_OscConfig+0x270>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fd fcb1 	bl	8002514 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fd fcad 	bl	8002514 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e1a1      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4927      	ldr	r1, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	e015      	b.n	8004c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bea:	4b26      	ldr	r3, [pc, #152]	; (8004c84 <HAL_RCC_OscConfig+0x270>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fc90 	bl	8002514 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fd fc8c 	bl	8002514 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e180      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d03a      	beq.n	8004c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d019      	beq.n	8004c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2a:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c30:	f7fd fc70 	bl	8002514 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c38:	f7fd fc6c 	bl	8002514 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e160      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c56:	2001      	movs	r0, #1
 8004c58:	f000 faba 	bl	80051d0 <RCC_Delay>
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_OscConfig+0x274>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c64:	f7fd fc56 	bl	8002514 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6a:	e00f      	b.n	8004c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fd fc52 	bl	8002514 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d908      	bls.n	8004c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e146      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	42420000 	.word	0x42420000
 8004c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	4b92      	ldr	r3, [pc, #584]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e9      	bne.n	8004c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a6 	beq.w	8004df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004caa:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb6:	4b88      	ldr	r3, [pc, #544]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4a87      	ldr	r2, [pc, #540]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	61d3      	str	r3, [r2, #28]
 8004cc2:	4b85      	ldr	r3, [pc, #532]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	4b82      	ldr	r3, [pc, #520]	; (8004edc <HAL_RCC_OscConfig+0x4c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d118      	bne.n	8004d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cde:	4b7f      	ldr	r3, [pc, #508]	; (8004edc <HAL_RCC_OscConfig+0x4c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a7e      	ldr	r2, [pc, #504]	; (8004edc <HAL_RCC_OscConfig+0x4c8>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cea:	f7fd fc13 	bl	8002514 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf2:	f7fd fc0f 	bl	8002514 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b64      	cmp	r3, #100	; 0x64
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e103      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	4b75      	ldr	r3, [pc, #468]	; (8004edc <HAL_RCC_OscConfig+0x4c8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x312>
 8004d18:	4b6f      	ldr	r3, [pc, #444]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	4a6e      	ldr	r2, [pc, #440]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6213      	str	r3, [r2, #32]
 8004d24:	e02d      	b.n	8004d82 <HAL_RCC_OscConfig+0x36e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x334>
 8004d2e:	4b6a      	ldr	r3, [pc, #424]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	4a69      	ldr	r2, [pc, #420]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	6213      	str	r3, [r2, #32]
 8004d3a:	4b67      	ldr	r3, [pc, #412]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4a66      	ldr	r2, [pc, #408]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	6213      	str	r3, [r2, #32]
 8004d46:	e01c      	b.n	8004d82 <HAL_RCC_OscConfig+0x36e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	d10c      	bne.n	8004d6a <HAL_RCC_OscConfig+0x356>
 8004d50:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	4a60      	ldr	r2, [pc, #384]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d56:	f043 0304 	orr.w	r3, r3, #4
 8004d5a:	6213      	str	r3, [r2, #32]
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6213      	str	r3, [r2, #32]
 8004d68:	e00b      	b.n	8004d82 <HAL_RCC_OscConfig+0x36e>
 8004d6a:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4a5a      	ldr	r2, [pc, #360]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	6213      	str	r3, [r2, #32]
 8004d76:	4b58      	ldr	r3, [pc, #352]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a57      	ldr	r2, [pc, #348]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	f023 0304 	bic.w	r3, r3, #4
 8004d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d015      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fd fbc3 	bl	8002514 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fd fbbf 	bl	8002514 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e0b1      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da8:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ee      	beq.n	8004d92 <HAL_RCC_OscConfig+0x37e>
 8004db4:	e014      	b.n	8004de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db6:	f7fd fbad 	bl	8002514 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fd fba9 	bl	8002514 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e09b      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ee      	bne.n	8004dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d105      	bne.n	8004df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de6:	4b3c      	ldr	r3, [pc, #240]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4a3b      	ldr	r2, [pc, #236]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8087 	beq.w	8004f0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dfc:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d061      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d146      	bne.n	8004e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e10:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <HAL_RCC_OscConfig+0x4cc>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e16:	f7fd fb7d 	bl	8002514 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1e:	f7fd fb79 	bl	8002514 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e06d      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e30:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d108      	bne.n	8004e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	4921      	ldr	r1, [pc, #132]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e58:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a19      	ldr	r1, [r3, #32]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	491b      	ldr	r1, [pc, #108]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fd fb4d 	bl	8002514 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fd fb49 	bl	8002514 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e03d      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x46a>
 8004e9c:	e035      	b.n	8004f0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <HAL_RCC_OscConfig+0x4cc>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fb36 	bl	8002514 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fd fb32 	bl	8002514 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e026      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_RCC_OscConfig+0x4c4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x498>
 8004eca:	e01e      	b.n	8004f0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e019      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_OscConfig+0x500>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000

08004f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0d0      	b.n	80050ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b6a      	ldr	r3, [pc, #424]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d910      	bls.n	8004f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b67      	ldr	r3, [pc, #412]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 0207 	bic.w	r2, r3, #7
 8004f42:	4965      	ldr	r1, [pc, #404]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d001      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0b8      	b.n	80050ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d020      	beq.n	8004faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f74:	4b59      	ldr	r3, [pc, #356]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a58      	ldr	r2, [pc, #352]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f8c:	4b53      	ldr	r3, [pc, #332]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a52      	ldr	r2, [pc, #328]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f98:	4b50      	ldr	r3, [pc, #320]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	494d      	ldr	r1, [pc, #308]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d040      	beq.n	8005038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d115      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e07f      	b.n	80050ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd6:	4b41      	ldr	r3, [pc, #260]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e073      	b.n	80050ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe6:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e06b      	b.n	80050ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff6:	4b39      	ldr	r3, [pc, #228]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f023 0203 	bic.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4936      	ldr	r1, [pc, #216]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005008:	f7fd fa84 	bl	8002514 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	e00a      	b.n	8005026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005010:	f7fd fa80 	bl	8002514 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e053      	b.n	80050ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 020c 	and.w	r2, r3, #12
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	429a      	cmp	r2, r3
 8005036:	d1eb      	bne.n	8005010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d210      	bcs.n	8005068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 0207 	bic.w	r2, r3, #7
 800504e:	4922      	ldr	r1, [pc, #136]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e032      	b.n	80050ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4916      	ldr	r1, [pc, #88]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	490e      	ldr	r1, [pc, #56]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050a6:	f000 f821 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 80050aa:	4602      	mov	r2, r0
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	490a      	ldr	r1, [pc, #40]	; (80050e0 <HAL_RCC_ClockConfig+0x1c8>)
 80050b8:	5ccb      	ldrb	r3, [r1, r3]
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <HAL_RCC_ClockConfig+0x1cc>)
 80050c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <HAL_RCC_ClockConfig+0x1d0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fd f9e2 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40022000 	.word	0x40022000
 80050dc:	40021000 	.word	0x40021000
 80050e0:	080061bc 	.word	0x080061bc
 80050e4:	20000000 	.word	0x20000000
 80050e8:	20000004 	.word	0x20000004

080050ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005106:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_RCC_GetSysClockFreq+0x94>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b04      	cmp	r3, #4
 8005114:	d002      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0x30>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d003      	beq.n	8005122 <HAL_RCC_GetSysClockFreq+0x36>
 800511a:	e027      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCC_GetSysClockFreq+0x98>)
 800511e:	613b      	str	r3, [r7, #16]
      break;
 8005120:	e027      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	0c9b      	lsrs	r3, r3, #18
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <HAL_RCC_GetSysClockFreq+0x9c>)
 800512c:	5cd3      	ldrb	r3, [r2, r3]
 800512e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_RCC_GetSysClockFreq+0x94>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	0c5b      	lsrs	r3, r3, #17
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005146:	5cd3      	ldrb	r3, [r2, r3]
 8005148:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <HAL_RCC_GetSysClockFreq+0x98>)
 800514e:	fb03 f202 	mul.w	r2, r3, r2
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e004      	b.n	8005166 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	613b      	str	r3, [r7, #16]
      break;
 800516a:	e002      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetSysClockFreq+0x98>)
 800516e:	613b      	str	r3, [r7, #16]
      break;
 8005170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005172:	693b      	ldr	r3, [r7, #16]
}
 8005174:	4618      	mov	r0, r3
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000
 8005184:	007a1200 	.word	0x007a1200
 8005188:	080061d4 	.word	0x080061d4
 800518c:	080061e4 	.word	0x080061e4
 8005190:	003d0900 	.word	0x003d0900

08005194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b02      	ldr	r3, [pc, #8]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr
 80051a4:	20000000 	.word	0x20000000

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff fff2 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	0adb      	lsrs	r3, r3, #11
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	080061cc 	.word	0x080061cc

080051d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <RCC_Delay+0x34>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <RCC_Delay+0x38>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0a5b      	lsrs	r3, r3, #9
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051ec:	bf00      	nop
  }
  while (Delay --);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	60fa      	str	r2, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f9      	bne.n	80051ec <RCC_Delay+0x1c>
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000000 	.word	0x20000000
 8005208:	10624dd3 	.word	0x10624dd3

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d07d      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522c:	4b4f      	ldr	r3, [pc, #316]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10d      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005238:	4b4c      	ldr	r3, [pc, #304]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4a4b      	ldr	r2, [pc, #300]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	61d3      	str	r3, [r2, #28]
 8005244:	4b49      	ldr	r3, [pc, #292]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b46      	ldr	r3, [pc, #280]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d118      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005260:	4b43      	ldr	r3, [pc, #268]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a42      	ldr	r2, [pc, #264]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526c:	f7fd f952 	bl	8002514 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005272:	e008      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005274:	f7fd f94e 	bl	8002514 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	; 0x64
 8005280:	d901      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e06d      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005286:	4b3a      	ldr	r3, [pc, #232]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005292:	4b36      	ldr	r3, [pc, #216]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02e      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d027      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052b0:	4b2e      	ldr	r3, [pc, #184]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c0:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052c6:	4a29      	ldr	r2, [pc, #164]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d014      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d6:	f7fd f91d 	bl	8002514 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fd f919 	bl	8002514 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e036      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ee      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005300:	4b1a      	ldr	r3, [pc, #104]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4917      	ldr	r1, [pc, #92]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	4313      	orrs	r3, r2
 8005310:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d105      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4a13      	ldr	r2, [pc, #76]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	490b      	ldr	r1, [pc, #44]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533e:	4313      	orrs	r3, r2
 8005340:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4904      	ldr	r1, [pc, #16]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	40007000 	.word	0x40007000
 8005374:	42420440 	.word	0x42420440

08005378 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b10      	cmp	r3, #16
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b10      	cmp	r3, #16
 800539e:	f200 808a 	bhi.w	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d045      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d075      	beq.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80053ae:	e082      	b.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80053b0:	4b46      	ldr	r3, [pc, #280]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80053b6:	4b45      	ldr	r3, [pc, #276]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d07b      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	0c9b      	lsrs	r3, r3, #18
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	4a41      	ldr	r2, [pc, #260]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80053cc:	5cd3      	ldrb	r3, [r2, r3]
 80053ce:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d015      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053da:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	0c5b      	lsrs	r3, r3, #17
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	4a3b      	ldr	r2, [pc, #236]	; (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80053e6:	5cd3      	ldrb	r3, [r2, r3]
 80053e8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80053f4:	4a38      	ldr	r2, [pc, #224]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	e004      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4a34      	ldr	r2, [pc, #208]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005410:	4b2e      	ldr	r3, [pc, #184]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541c:	d102      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	61bb      	str	r3, [r7, #24]
      break;
 8005422:	e04a      	b.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4a2d      	ldr	r2, [pc, #180]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	61bb      	str	r3, [r7, #24]
      break;
 8005432:	e042      	b.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005444:	d108      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e01f      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005462:	d109      	bne.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005470:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e00f      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005482:	d11c      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d016      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005490:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005494:	61bb      	str	r3, [r7, #24]
      break;
 8005496:	e012      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005498:	e011      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800549a:	f7ff fe85 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	0b9b      	lsrs	r3, r3, #14
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	61bb      	str	r3, [r7, #24]
      break;
 80054b4:	e004      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054be:	bf00      	nop
    }
  }
  return (frequency);
 80054c0:	69bb      	ldr	r3, [r7, #24]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	080061e8 	.word	0x080061e8
 80054d4:	080061f8 	.word	0x080061f8
 80054d8:	007a1200 	.word	0x007a1200
 80054dc:	003d0900 	.word	0x003d0900
 80054e0:	aaaaaaab 	.word	0xaaaaaaab

080054e4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e07a      	b.n	80055f0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7c5b      	ldrb	r3, [r3, #17]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fb fb38 	bl	8000b80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f870 	bl	80055fc <HAL_RTC_WaitForSynchro>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2204      	movs	r2, #4
 8005526:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e061      	b.n	80055f0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f892 	bl	8005656 <RTC_EnterInitMode>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2204      	movs	r2, #4
 800553c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e056      	b.n	80055f0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0207 	bic.w	r2, r2, #7
 8005550:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800555a:	4b27      	ldr	r3, [pc, #156]	; (80055f8 <HAL_RTC_Init+0x114>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <HAL_RTC_Init+0x114>)
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005566:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <HAL_RTC_Init+0x114>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4921      	ldr	r1, [pc, #132]	; (80055f8 <HAL_RTC_Init+0x114>)
 8005574:	4313      	orrs	r3, r2
 8005576:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005580:	d003      	beq.n	800558a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e00e      	b.n	80055a8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800558a:	2001      	movs	r0, #1
 800558c:	f7ff fef4 	bl	8005378 <HAL_RCCEx_GetPeriphCLKFreq>
 8005590:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2204      	movs	r2, #4
 800559c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e026      	b.n	80055f0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	0c1a      	lsrs	r2, r3, #16
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f002 020f 	and.w	r2, r2, #15
 80055b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	b292      	uxth	r2, r2
 80055be:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f870 	bl	80056a6 <RTC_ExitInitMode>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2204      	movs	r2, #4
 80055d0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e00c      	b.n	80055f0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40006c00 	.word	0x40006c00

080055fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e01d      	b.n	800564e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0208 	bic.w	r2, r2, #8
 8005620:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005622:	f7fc ff77 	bl	8002514 <HAL_GetTick>
 8005626:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005628:	e009      	b.n	800563e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800562a:	f7fc ff73 	bl	8002514 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005638:	d901      	bls.n	800563e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e007      	b.n	800564e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005662:	f7fc ff57 	bl	8002514 <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005668:	e009      	b.n	800567e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800566a:	f7fc ff53 	bl	8002514 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005678:	d901      	bls.n	800567e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e00f      	b.n	800569e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ee      	beq.n	800566a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0210 	orr.w	r2, r2, #16
 800569a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0210 	bic.w	r2, r2, #16
 80056c0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80056c2:	f7fc ff27 	bl	8002514 <HAL_GetTick>
 80056c6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80056c8:	e009      	b.n	80056de <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80056ca:	f7fc ff23 	bl	8002514 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d8:	d901      	bls.n	80056de <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e007      	b.n	80056ee <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ee      	beq.n	80056ca <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e041      	b.n	800578c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fc fe43 	bl	80023a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 fa6d 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e035      	b.n	8005818 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a16      	ldr	r2, [pc, #88]	; (8005824 <HAL_TIM_Base_Start_IT+0x90>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x4e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d6:	d004      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x4e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a12      	ldr	r2, [pc, #72]	; (8005828 <HAL_TIM_Base_Start_IT+0x94>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d111      	bne.n	8005806 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d010      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005804:	e007      	b.n	8005816 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400

0800582c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b02      	cmp	r3, #2
 8005840:	d122      	bne.n	8005888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b02      	cmp	r3, #2
 800584e:	d11b      	bne.n	8005888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0202 	mvn.w	r2, #2
 8005858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f9b4 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9a7 	bl	8005bca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f9b6 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b04      	cmp	r3, #4
 8005894:	d122      	bne.n	80058dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d11b      	bne.n	80058dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0204 	mvn.w	r2, #4
 80058ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f98a 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 80058c8:	e005      	b.n	80058d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f97d 	bl	8005bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f98c 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d122      	bne.n	8005930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d11b      	bne.n	8005930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0208 	mvn.w	r2, #8
 8005900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2204      	movs	r2, #4
 8005906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f960 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 800591c:	e005      	b.n	800592a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f953 	bl	8005bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f962 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b10      	cmp	r3, #16
 800593c:	d122      	bne.n	8005984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b10      	cmp	r3, #16
 800594a:	d11b      	bne.n	8005984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0210 	mvn.w	r2, #16
 8005954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2208      	movs	r2, #8
 800595a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f936 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 8005970:	e005      	b.n	800597e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f929 	bl	8005bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f938 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b01      	cmp	r3, #1
 8005990:	d10e      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0201 	mvn.w	r2, #1
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc fd20 	bl	80023f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	d10e      	bne.n	80059dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d107      	bne.n	80059dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa6b 	bl	8005eb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b40      	cmp	r3, #64	; 0x40
 80059e8:	d10e      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d107      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8fc 	bl	8005c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d10e      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d107      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0220 	mvn.w	r2, #32
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa36 	bl	8005ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_TIM_ConfigClockSource+0x1c>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e0b4      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x186>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a90:	d03e      	beq.n	8005b10 <HAL_TIM_ConfigClockSource+0xd4>
 8005a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a96:	f200 8087 	bhi.w	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	f000 8086 	beq.w	8005bae <HAL_TIM_ConfigClockSource+0x172>
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa6:	d87f      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b70      	cmp	r3, #112	; 0x70
 8005aaa:	d01a      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8005aac:	2b70      	cmp	r3, #112	; 0x70
 8005aae:	d87b      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b60      	cmp	r3, #96	; 0x60
 8005ab2:	d050      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x11a>
 8005ab4:	2b60      	cmp	r3, #96	; 0x60
 8005ab6:	d877      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b50      	cmp	r3, #80	; 0x50
 8005aba:	d03c      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0xfa>
 8005abc:	2b50      	cmp	r3, #80	; 0x50
 8005abe:	d873      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d058      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x13a>
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d86f      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b30      	cmp	r3, #48	; 0x30
 8005aca:	d064      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x15a>
 8005acc:	2b30      	cmp	r3, #48	; 0x30
 8005ace:	d86b      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d060      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x15a>
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	d867      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d05c      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x15a>
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d05a      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x15a>
 8005ae0:	e062      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005af2:	f000 f95e 	bl	8005db2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	609a      	str	r2, [r3, #8]
      break;
 8005b0e:	e04f      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b20:	f000 f947 	bl	8005db2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b32:	609a      	str	r2, [r3, #8]
      break;
 8005b34:	e03c      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 f8be 	bl	8005cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2150      	movs	r1, #80	; 0x50
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f915 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 8005b54:	e02c      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 f8dc 	bl	8005d20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2160      	movs	r1, #96	; 0x60
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f905 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 8005b74:	e01c      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 f89e 	bl	8005cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2140      	movs	r1, #64	; 0x40
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f8f5 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 8005b94:	e00c      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f000 f8ec 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 8005ba6:	e003      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
      break;
 8005bac:	e000      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
	...

08005c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <TIM_Base_SetConfig+0xa8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_Base_SetConfig+0x28>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0x28>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <TIM_Base_SetConfig+0xac>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1a      	ldr	r2, [pc, #104]	; (8005cbc <TIM_Base_SetConfig+0xa8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d007      	beq.n	8005c66 <TIM_Base_SetConfig+0x52>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d003      	beq.n	8005c66 <TIM_Base_SetConfig+0x52>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <TIM_Base_SetConfig+0xac>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d108      	bne.n	8005c78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <TIM_Base_SetConfig+0xa8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d103      	bne.n	8005cac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	615a      	str	r2, [r3, #20]
}
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40000400 	.word	0x40000400

08005cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f023 0201 	bic.w	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f023 030a 	bic.w	r3, r3, #10
 8005d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f023 0210 	bic.w	r2, r3, #16
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	031b      	lsls	r3, r3, #12
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	621a      	str	r2, [r3, #32]
}
 8005d74:	bf00      	nop
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f043 0307 	orr.w	r3, r3, #7
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	609a      	str	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
 8005dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	021a      	lsls	r2, r3, #8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	609a      	str	r2, [r3, #8]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e041      	b.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a14      	ldr	r2, [pc, #80]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d004      	beq.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10c      	bne.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40000400 	.word	0x40000400

08005ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <malloc>:
 8005ec4:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <malloc+0xc>)
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f000 b82b 	b.w	8005f24 <_malloc_r>
 8005ece:	bf00      	nop
 8005ed0:	20000058 	.word	0x20000058

08005ed4 <free>:
 8005ed4:	4b02      	ldr	r3, [pc, #8]	; (8005ee0 <free+0xc>)
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	f000 b901 	b.w	80060e0 <_free_r>
 8005ede:	bf00      	nop
 8005ee0:	20000058 	.word	0x20000058

08005ee4 <sbrk_aligned>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	4e0e      	ldr	r6, [pc, #56]	; (8005f20 <sbrk_aligned+0x3c>)
 8005ee8:	460c      	mov	r4, r1
 8005eea:	6831      	ldr	r1, [r6, #0]
 8005eec:	4605      	mov	r5, r0
 8005eee:	b911      	cbnz	r1, 8005ef6 <sbrk_aligned+0x12>
 8005ef0:	f000 f8ac 	bl	800604c <_sbrk_r>
 8005ef4:	6030      	str	r0, [r6, #0]
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 f8a7 	bl	800604c <_sbrk_r>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	d00a      	beq.n	8005f18 <sbrk_aligned+0x34>
 8005f02:	1cc4      	adds	r4, r0, #3
 8005f04:	f024 0403 	bic.w	r4, r4, #3
 8005f08:	42a0      	cmp	r0, r4
 8005f0a:	d007      	beq.n	8005f1c <sbrk_aligned+0x38>
 8005f0c:	1a21      	subs	r1, r4, r0
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f89c 	bl	800604c <_sbrk_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d101      	bne.n	8005f1c <sbrk_aligned+0x38>
 8005f18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	200001dc 	.word	0x200001dc

08005f24 <_malloc_r>:
 8005f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f28:	1ccd      	adds	r5, r1, #3
 8005f2a:	f025 0503 	bic.w	r5, r5, #3
 8005f2e:	3508      	adds	r5, #8
 8005f30:	2d0c      	cmp	r5, #12
 8005f32:	bf38      	it	cc
 8005f34:	250c      	movcc	r5, #12
 8005f36:	2d00      	cmp	r5, #0
 8005f38:	4607      	mov	r7, r0
 8005f3a:	db01      	blt.n	8005f40 <_malloc_r+0x1c>
 8005f3c:	42a9      	cmp	r1, r5
 8005f3e:	d905      	bls.n	8005f4c <_malloc_r+0x28>
 8005f40:	230c      	movs	r3, #12
 8005f42:	2600      	movs	r6, #0
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	4630      	mov	r0, r6
 8005f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006020 <_malloc_r+0xfc>
 8005f50:	f000 f868 	bl	8006024 <__malloc_lock>
 8005f54:	f8d8 3000 	ldr.w	r3, [r8]
 8005f58:	461c      	mov	r4, r3
 8005f5a:	bb5c      	cbnz	r4, 8005fb4 <_malloc_r+0x90>
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f7ff ffc0 	bl	8005ee4 <sbrk_aligned>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	4604      	mov	r4, r0
 8005f68:	d155      	bne.n	8006016 <_malloc_r+0xf2>
 8005f6a:	f8d8 4000 	ldr.w	r4, [r8]
 8005f6e:	4626      	mov	r6, r4
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	d145      	bne.n	8006000 <_malloc_r+0xdc>
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	d048      	beq.n	800600a <_malloc_r+0xe6>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	eb04 0903 	add.w	r9, r4, r3
 8005f82:	f000 f863 	bl	800604c <_sbrk_r>
 8005f86:	4581      	cmp	r9, r0
 8005f88:	d13f      	bne.n	800600a <_malloc_r+0xe6>
 8005f8a:	6821      	ldr	r1, [r4, #0]
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	1a6d      	subs	r5, r5, r1
 8005f90:	4629      	mov	r1, r5
 8005f92:	f7ff ffa7 	bl	8005ee4 <sbrk_aligned>
 8005f96:	3001      	adds	r0, #1
 8005f98:	d037      	beq.n	800600a <_malloc_r+0xe6>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	442b      	add	r3, r5
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d038      	beq.n	800601a <_malloc_r+0xf6>
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	42a2      	cmp	r2, r4
 8005fac:	d12b      	bne.n	8006006 <_malloc_r+0xe2>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	e00f      	b.n	8005fd4 <_malloc_r+0xb0>
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	1b52      	subs	r2, r2, r5
 8005fb8:	d41f      	bmi.n	8005ffa <_malloc_r+0xd6>
 8005fba:	2a0b      	cmp	r2, #11
 8005fbc:	d917      	bls.n	8005fee <_malloc_r+0xca>
 8005fbe:	1961      	adds	r1, r4, r5
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	6025      	str	r5, [r4, #0]
 8005fc4:	bf18      	it	ne
 8005fc6:	6059      	strne	r1, [r3, #4]
 8005fc8:	6863      	ldr	r3, [r4, #4]
 8005fca:	bf08      	it	eq
 8005fcc:	f8c8 1000 	streq.w	r1, [r8]
 8005fd0:	5162      	str	r2, [r4, r5]
 8005fd2:	604b      	str	r3, [r1, #4]
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	f104 060b 	add.w	r6, r4, #11
 8005fda:	f000 f829 	bl	8006030 <__malloc_unlock>
 8005fde:	f026 0607 	bic.w	r6, r6, #7
 8005fe2:	1d23      	adds	r3, r4, #4
 8005fe4:	1af2      	subs	r2, r6, r3
 8005fe6:	d0ae      	beq.n	8005f46 <_malloc_r+0x22>
 8005fe8:	1b9b      	subs	r3, r3, r6
 8005fea:	50a3      	str	r3, [r4, r2]
 8005fec:	e7ab      	b.n	8005f46 <_malloc_r+0x22>
 8005fee:	42a3      	cmp	r3, r4
 8005ff0:	6862      	ldr	r2, [r4, #4]
 8005ff2:	d1dd      	bne.n	8005fb0 <_malloc_r+0x8c>
 8005ff4:	f8c8 2000 	str.w	r2, [r8]
 8005ff8:	e7ec      	b.n	8005fd4 <_malloc_r+0xb0>
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	6864      	ldr	r4, [r4, #4]
 8005ffe:	e7ac      	b.n	8005f5a <_malloc_r+0x36>
 8006000:	4634      	mov	r4, r6
 8006002:	6876      	ldr	r6, [r6, #4]
 8006004:	e7b4      	b.n	8005f70 <_malloc_r+0x4c>
 8006006:	4613      	mov	r3, r2
 8006008:	e7cc      	b.n	8005fa4 <_malloc_r+0x80>
 800600a:	230c      	movs	r3, #12
 800600c:	4638      	mov	r0, r7
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	f000 f80e 	bl	8006030 <__malloc_unlock>
 8006014:	e797      	b.n	8005f46 <_malloc_r+0x22>
 8006016:	6025      	str	r5, [r4, #0]
 8006018:	e7dc      	b.n	8005fd4 <_malloc_r+0xb0>
 800601a:	605b      	str	r3, [r3, #4]
 800601c:	deff      	udf	#255	; 0xff
 800601e:	bf00      	nop
 8006020:	200001d8 	.word	0x200001d8

08006024 <__malloc_lock>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__malloc_lock+0x8>)
 8006026:	f000 b84b 	b.w	80060c0 <__retarget_lock_acquire_recursive>
 800602a:	bf00      	nop
 800602c:	20000318 	.word	0x20000318

08006030 <__malloc_unlock>:
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <__malloc_unlock+0x8>)
 8006032:	f000 b846 	b.w	80060c2 <__retarget_lock_release_recursive>
 8006036:	bf00      	nop
 8006038:	20000318 	.word	0x20000318

0800603c <memset>:
 800603c:	4603      	mov	r3, r0
 800603e:	4402      	add	r2, r0
 8006040:	4293      	cmp	r3, r2
 8006042:	d100      	bne.n	8006046 <memset+0xa>
 8006044:	4770      	bx	lr
 8006046:	f803 1b01 	strb.w	r1, [r3], #1
 800604a:	e7f9      	b.n	8006040 <memset+0x4>

0800604c <_sbrk_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	2300      	movs	r3, #0
 8006050:	4d05      	ldr	r5, [pc, #20]	; (8006068 <_sbrk_r+0x1c>)
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	f7fc f91c 	bl	8002294 <_sbrk>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_sbrk_r+0x1a>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_sbrk_r+0x1a>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	2000031c 	.word	0x2000031c

0800606c <__errno>:
 800606c:	4b01      	ldr	r3, [pc, #4]	; (8006074 <__errno+0x8>)
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000058 	.word	0x20000058

08006078 <__libc_init_array>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	2600      	movs	r6, #0
 800607c:	4d0c      	ldr	r5, [pc, #48]	; (80060b0 <__libc_init_array+0x38>)
 800607e:	4c0d      	ldr	r4, [pc, #52]	; (80060b4 <__libc_init_array+0x3c>)
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	42a6      	cmp	r6, r4
 8006086:	d109      	bne.n	800609c <__libc_init_array+0x24>
 8006088:	f000 f872 	bl	8006170 <_init>
 800608c:	2600      	movs	r6, #0
 800608e:	4d0a      	ldr	r5, [pc, #40]	; (80060b8 <__libc_init_array+0x40>)
 8006090:	4c0a      	ldr	r4, [pc, #40]	; (80060bc <__libc_init_array+0x44>)
 8006092:	1b64      	subs	r4, r4, r5
 8006094:	10a4      	asrs	r4, r4, #2
 8006096:	42a6      	cmp	r6, r4
 8006098:	d105      	bne.n	80060a6 <__libc_init_array+0x2e>
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a0:	4798      	blx	r3
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7ee      	b.n	8006084 <__libc_init_array+0xc>
 80060a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060aa:	4798      	blx	r3
 80060ac:	3601      	adds	r6, #1
 80060ae:	e7f2      	b.n	8006096 <__libc_init_array+0x1e>
 80060b0:	080061fc 	.word	0x080061fc
 80060b4:	080061fc 	.word	0x080061fc
 80060b8:	080061fc 	.word	0x080061fc
 80060bc:	08006200 	.word	0x08006200

080060c0 <__retarget_lock_acquire_recursive>:
 80060c0:	4770      	bx	lr

080060c2 <__retarget_lock_release_recursive>:
 80060c2:	4770      	bx	lr

080060c4 <memcpy>:
 80060c4:	440a      	add	r2, r1
 80060c6:	4291      	cmp	r1, r2
 80060c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060cc:	d100      	bne.n	80060d0 <memcpy+0xc>
 80060ce:	4770      	bx	lr
 80060d0:	b510      	push	{r4, lr}
 80060d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d6:	4291      	cmp	r1, r2
 80060d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060dc:	d1f9      	bne.n	80060d2 <memcpy+0xe>
 80060de:	bd10      	pop	{r4, pc}

080060e0 <_free_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4605      	mov	r5, r0
 80060e4:	2900      	cmp	r1, #0
 80060e6:	d040      	beq.n	800616a <_free_r+0x8a>
 80060e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ec:	1f0c      	subs	r4, r1, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bfb8      	it	lt
 80060f2:	18e4      	addlt	r4, r4, r3
 80060f4:	f7ff ff96 	bl	8006024 <__malloc_lock>
 80060f8:	4a1c      	ldr	r2, [pc, #112]	; (800616c <_free_r+0x8c>)
 80060fa:	6813      	ldr	r3, [r2, #0]
 80060fc:	b933      	cbnz	r3, 800610c <_free_r+0x2c>
 80060fe:	6063      	str	r3, [r4, #4]
 8006100:	6014      	str	r4, [r2, #0]
 8006102:	4628      	mov	r0, r5
 8006104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006108:	f7ff bf92 	b.w	8006030 <__malloc_unlock>
 800610c:	42a3      	cmp	r3, r4
 800610e:	d908      	bls.n	8006122 <_free_r+0x42>
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	1821      	adds	r1, r4, r0
 8006114:	428b      	cmp	r3, r1
 8006116:	bf01      	itttt	eq
 8006118:	6819      	ldreq	r1, [r3, #0]
 800611a:	685b      	ldreq	r3, [r3, #4]
 800611c:	1809      	addeq	r1, r1, r0
 800611e:	6021      	streq	r1, [r4, #0]
 8006120:	e7ed      	b.n	80060fe <_free_r+0x1e>
 8006122:	461a      	mov	r2, r3
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	b10b      	cbz	r3, 800612c <_free_r+0x4c>
 8006128:	42a3      	cmp	r3, r4
 800612a:	d9fa      	bls.n	8006122 <_free_r+0x42>
 800612c:	6811      	ldr	r1, [r2, #0]
 800612e:	1850      	adds	r0, r2, r1
 8006130:	42a0      	cmp	r0, r4
 8006132:	d10b      	bne.n	800614c <_free_r+0x6c>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	4401      	add	r1, r0
 8006138:	1850      	adds	r0, r2, r1
 800613a:	4283      	cmp	r3, r0
 800613c:	6011      	str	r1, [r2, #0]
 800613e:	d1e0      	bne.n	8006102 <_free_r+0x22>
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4408      	add	r0, r1
 8006146:	6010      	str	r0, [r2, #0]
 8006148:	6053      	str	r3, [r2, #4]
 800614a:	e7da      	b.n	8006102 <_free_r+0x22>
 800614c:	d902      	bls.n	8006154 <_free_r+0x74>
 800614e:	230c      	movs	r3, #12
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	e7d6      	b.n	8006102 <_free_r+0x22>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	1821      	adds	r1, r4, r0
 8006158:	428b      	cmp	r3, r1
 800615a:	bf01      	itttt	eq
 800615c:	6819      	ldreq	r1, [r3, #0]
 800615e:	685b      	ldreq	r3, [r3, #4]
 8006160:	1809      	addeq	r1, r1, r0
 8006162:	6021      	streq	r1, [r4, #0]
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6054      	str	r4, [r2, #4]
 8006168:	e7cb      	b.n	8006102 <_free_r+0x22>
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	200001d8 	.word	0x200001d8

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
